// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package proyecto_bi.carga_excel_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: carga_excel Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.0.1.20180411_1414
 * @status 
 */
public class carga_excel implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "carga_excel";
	private final String projectName = "PROYECTO_BI";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap
				.put(KEY_DB_DATASOURCES_RAW,
						new java.util.HashMap<String, javax.sql.DataSource>(
								dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent
						+ " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					carga_excel.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(carga_excel.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputExcel_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tConvertType_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputExcel_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tConvertType_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputExcel_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tConvertType_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_11_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputExcel_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputExcel_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputExcel_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class out1Struct implements
			routines.system.IPersistableRow<out1Struct> {
		final static byte[] commonByteArrayLock_PROYECTO_BI_carga_excel = new byte[0];
		static byte[] commonByteArray_PROYECTO_BI_carga_excel = new byte[0];

		public String persona;

		public String getPersona() {
			return this.persona;
		}

		public String codigo;

		public String getCodigo() {
			return this.codigo;
		}

		public String razonsocial;

		public String getRazonsocial() {
			return this.razonsocial;
		}

		public String direccion;

		public String getDireccion() {
			return this.direccion;
		}

		public String rucDNI;

		public String getRucDNI() {
			return this.rucDNI;
		}

		public String telefono1;

		public String getTelefono1() {
			return this.telefono1;
		}

		public String telefono2;

		public String getTelefono2() {
			return this.telefono2;
		}

		public String apellidoMaterno;

		public String getApellidoMaterno() {
			return this.apellidoMaterno;
		}

		public String apellidoPaterno;

		public String getApellidoPaterno() {
			return this.apellidoPaterno;
		}

		public String nombre;

		public String getNombre() {
			return this.nombre;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROYECTO_BI_carga_excel.length) {
					if (length < 1024
							&& commonByteArray_PROYECTO_BI_carga_excel.length == 0) {
						commonByteArray_PROYECTO_BI_carga_excel = new byte[1024];
					} else {
						commonByteArray_PROYECTO_BI_carga_excel = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROYECTO_BI_carga_excel, 0,
						length);
				strReturn = new String(commonByteArray_PROYECTO_BI_carga_excel,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROYECTO_BI_carga_excel) {

				try {

					int length = 0;

					this.persona = readString(dis);

					this.codigo = readString(dis);

					this.razonsocial = readString(dis);

					this.direccion = readString(dis);

					this.rucDNI = readString(dis);

					this.telefono1 = readString(dis);

					this.telefono2 = readString(dis);

					this.apellidoMaterno = readString(dis);

					this.apellidoPaterno = readString(dis);

					this.nombre = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.persona, dos);

				// String

				writeString(this.codigo, dos);

				// String

				writeString(this.razonsocial, dos);

				// String

				writeString(this.direccion, dos);

				// String

				writeString(this.rucDNI, dos);

				// String

				writeString(this.telefono1, dos);

				// String

				writeString(this.telefono2, dos);

				// String

				writeString(this.apellidoMaterno, dos);

				// String

				writeString(this.apellidoPaterno, dos);

				// String

				writeString(this.nombre, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("persona=" + persona);
			sb.append(",codigo=" + codigo);
			sb.append(",razonsocial=" + razonsocial);
			sb.append(",direccion=" + direccion);
			sb.append(",rucDNI=" + rucDNI);
			sb.append(",telefono1=" + telefono1);
			sb.append(",telefono2=" + telefono2);
			sb.append(",apellidoMaterno=" + apellidoMaterno);
			sb.append(",apellidoPaterno=" + apellidoPaterno);
			sb.append(",nombre=" + nombre);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_PROYECTO_BI_carga_excel = new byte[0];
		static byte[] commonByteArray_PROYECTO_BI_carga_excel = new byte[0];

		public Integer A;

		public Integer getA() {
			return this.A;
		}

		public Integer B;

		public Integer getB() {
			return this.B;
		}

		public String C;

		public String getC() {
			return this.C;
		}

		public String D;

		public String getD() {
			return this.D;
		}

		public Long E;

		public Long getE() {
			return this.E;
		}

		public Long F;

		public Long getF() {
			return this.F;
		}

		public Long G;

		public Long getG() {
			return this.G;
		}

		public Integer H;

		public Integer getH() {
			return this.H;
		}

		public Integer I;

		public Integer getI() {
			return this.I;
		}

		public Integer J;

		public Integer getJ() {
			return this.J;
		}

		public Integer K;

		public Integer getK() {
			return this.K;
		}

		public String L;

		public String getL() {
			return this.L;
		}

		public String M;

		public String getM() {
			return this.M;
		}

		public Integer N;

		public Integer getN() {
			return this.N;
		}

		public String O;

		public String getO() {
			return this.O;
		}

		public String P;

		public String getP() {
			return this.P;
		}

		public String Q;

		public String getQ() {
			return this.Q;
		}

		public Integer R;

		public Integer getR() {
			return this.R;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROYECTO_BI_carga_excel.length) {
					if (length < 1024
							&& commonByteArray_PROYECTO_BI_carga_excel.length == 0) {
						commonByteArray_PROYECTO_BI_carga_excel = new byte[1024];
					} else {
						commonByteArray_PROYECTO_BI_carga_excel = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROYECTO_BI_carga_excel, 0,
						length);
				strReturn = new String(commonByteArray_PROYECTO_BI_carga_excel,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROYECTO_BI_carga_excel) {

				try {

					int length = 0;

					this.A = readInteger(dis);

					this.B = readInteger(dis);

					this.C = readString(dis);

					this.D = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.E = null;
					} else {
						this.E = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.F = null;
					} else {
						this.F = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.G = null;
					} else {
						this.G = dis.readLong();
					}

					this.H = readInteger(dis);

					this.I = readInteger(dis);

					this.J = readInteger(dis);

					this.K = readInteger(dis);

					this.L = readString(dis);

					this.M = readString(dis);

					this.N = readInteger(dis);

					this.O = readString(dis);

					this.P = readString(dis);

					this.Q = readString(dis);

					this.R = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.A, dos);

				// Integer

				writeInteger(this.B, dos);

				// String

				writeString(this.C, dos);

				// String

				writeString(this.D, dos);

				// Long

				if (this.E == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.E);
				}

				// Long

				if (this.F == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.F);
				}

				// Long

				if (this.G == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.G);
				}

				// Integer

				writeInteger(this.H, dos);

				// Integer

				writeInteger(this.I, dos);

				// Integer

				writeInteger(this.J, dos);

				// Integer

				writeInteger(this.K, dos);

				// String

				writeString(this.L, dos);

				// String

				writeString(this.M, dos);

				// Integer

				writeInteger(this.N, dos);

				// String

				writeString(this.O, dos);

				// String

				writeString(this.P, dos);

				// String

				writeString(this.Q, dos);

				// Integer

				writeInteger(this.R, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("A=" + String.valueOf(A));
			sb.append(",B=" + String.valueOf(B));
			sb.append(",C=" + C);
			sb.append(",D=" + D);
			sb.append(",E=" + String.valueOf(E));
			sb.append(",F=" + String.valueOf(F));
			sb.append(",G=" + String.valueOf(G));
			sb.append(",H=" + String.valueOf(H));
			sb.append(",I=" + String.valueOf(I));
			sb.append(",J=" + String.valueOf(J));
			sb.append(",K=" + String.valueOf(K));
			sb.append(",L=" + L);
			sb.append(",M=" + M);
			sb.append(",N=" + String.valueOf(N));
			sb.append(",O=" + O);
			sb.append(",P=" + P);
			sb.append(",Q=" + Q);
			sb.append(",R=" + String.valueOf(R));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_PROYECTO_BI_carga_excel = new byte[0];
		static byte[] commonByteArray_PROYECTO_BI_carga_excel = new byte[0];

		public Integer A;

		public Integer getA() {
			return this.A;
		}

		public Integer B;

		public Integer getB() {
			return this.B;
		}

		public String C;

		public String getC() {
			return this.C;
		}

		public String D;

		public String getD() {
			return this.D;
		}

		public Long E;

		public Long getE() {
			return this.E;
		}

		public Long F;

		public Long getF() {
			return this.F;
		}

		public Long G;

		public Long getG() {
			return this.G;
		}

		public Integer H;

		public Integer getH() {
			return this.H;
		}

		public Integer I;

		public Integer getI() {
			return this.I;
		}

		public Integer J;

		public Integer getJ() {
			return this.J;
		}

		public Integer K;

		public Integer getK() {
			return this.K;
		}

		public String L;

		public String getL() {
			return this.L;
		}

		public String M;

		public String getM() {
			return this.M;
		}

		public Integer N;

		public Integer getN() {
			return this.N;
		}

		public String O;

		public String getO() {
			return this.O;
		}

		public String P;

		public String getP() {
			return this.P;
		}

		public String Q;

		public String getQ() {
			return this.Q;
		}

		public Integer R;

		public Integer getR() {
			return this.R;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROYECTO_BI_carga_excel.length) {
					if (length < 1024
							&& commonByteArray_PROYECTO_BI_carga_excel.length == 0) {
						commonByteArray_PROYECTO_BI_carga_excel = new byte[1024];
					} else {
						commonByteArray_PROYECTO_BI_carga_excel = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROYECTO_BI_carga_excel, 0,
						length);
				strReturn = new String(commonByteArray_PROYECTO_BI_carga_excel,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROYECTO_BI_carga_excel) {

				try {

					int length = 0;

					this.A = readInteger(dis);

					this.B = readInteger(dis);

					this.C = readString(dis);

					this.D = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.E = null;
					} else {
						this.E = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.F = null;
					} else {
						this.F = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.G = null;
					} else {
						this.G = dis.readLong();
					}

					this.H = readInteger(dis);

					this.I = readInteger(dis);

					this.J = readInteger(dis);

					this.K = readInteger(dis);

					this.L = readString(dis);

					this.M = readString(dis);

					this.N = readInteger(dis);

					this.O = readString(dis);

					this.P = readString(dis);

					this.Q = readString(dis);

					this.R = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.A, dos);

				// Integer

				writeInteger(this.B, dos);

				// String

				writeString(this.C, dos);

				// String

				writeString(this.D, dos);

				// Long

				if (this.E == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.E);
				}

				// Long

				if (this.F == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.F);
				}

				// Long

				if (this.G == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.G);
				}

				// Integer

				writeInteger(this.H, dos);

				// Integer

				writeInteger(this.I, dos);

				// Integer

				writeInteger(this.J, dos);

				// Integer

				writeInteger(this.K, dos);

				// String

				writeString(this.L, dos);

				// String

				writeString(this.M, dos);

				// Integer

				writeInteger(this.N, dos);

				// String

				writeString(this.O, dos);

				// String

				writeString(this.P, dos);

				// String

				writeString(this.Q, dos);

				// Integer

				writeInteger(this.R, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("A=" + String.valueOf(A));
			sb.append(",B=" + String.valueOf(B));
			sb.append(",C=" + C);
			sb.append(",D=" + D);
			sb.append(",E=" + String.valueOf(E));
			sb.append(",F=" + String.valueOf(F));
			sb.append(",G=" + String.valueOf(G));
			sb.append(",H=" + String.valueOf(H));
			sb.append(",I=" + String.valueOf(I));
			sb.append(",J=" + String.valueOf(J));
			sb.append(",K=" + String.valueOf(K));
			sb.append(",L=" + L);
			sb.append(",M=" + M);
			sb.append(",N=" + String.valueOf(N));
			sb.append(",O=" + O);
			sb.append(",P=" + P);
			sb.append(",Q=" + Q);
			sb.append(",R=" + String.valueOf(R));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputExcel_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				row4Struct row4 = new row4Struct();
				out1Struct out1 = new out1Struct();

				/**
				 * [tDBOutput_7 begin ] start
				 */

				ok_Hash.put("tDBOutput_7", false);
				start_Hash.put("tDBOutput_7", System.currentTimeMillis());

				currentComponent = "tDBOutput_7";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("out1" + iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_7 = 0;

				class BytesLimit65535_tDBOutput_7 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBOutput_7().limitLog4jByte();

				int nb_line_tDBOutput_7 = 0;
				int nb_line_update_tDBOutput_7 = 0;
				int nb_line_inserted_tDBOutput_7 = 0;
				int nb_line_deleted_tDBOutput_7 = 0;
				int nb_line_rejected_tDBOutput_7 = 0;

				int deletedCount_tDBOutput_7 = 0;
				int updatedCount_tDBOutput_7 = 0;
				int insertedCount_tDBOutput_7 = 0;
				int rejectedCount_tDBOutput_7 = 0;
				String dbschema_tDBOutput_7 = null;
				String tableName_tDBOutput_7 = null;
				boolean whetherReject_tDBOutput_7 = false;

				java.util.Calendar calendar_tDBOutput_7 = java.util.Calendar
						.getInstance();
				long year1_tDBOutput_7 = TalendDate.parseDate("yyyy-MM-dd",
						"0001-01-01").getTime();
				long year2_tDBOutput_7 = TalendDate.parseDate("yyyy-MM-dd",
						"1753-01-01").getTime();
				long year10000_tDBOutput_7 = TalendDate.parseDate(
						"yyyy-MM-dd HH:mm:ss", "9999-12-31 24:00:00").getTime();
				long date_tDBOutput_7;

				java.util.Calendar calendar_datetimeoffset_tDBOutput_7 = java.util.Calendar
						.getInstance(java.util.TimeZone.getTimeZone("UTC"));

				java.sql.Connection conn_tDBOutput_7 = null;
				String dbUser_tDBOutput_7 = null;
				dbschema_tDBOutput_7 = "";
				String driverClass_tDBOutput_7 = "net.sourceforge.jtds.jdbc.Driver";

				java.lang.Class.forName(driverClass_tDBOutput_7);
				String port_tDBOutput_7 = "1433";
				String dbname_tDBOutput_7 = "RETAIL";
				String url_tDBOutput_7 = "jdbc:jtds:sqlserver://"
						+ "ljc-sql-server.database.windows.net";
				if (!"".equals(port_tDBOutput_7)) {
					url_tDBOutput_7 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBOutput_7)) {
					url_tDBOutput_7 += "//" + "RETAIL";

				}
				url_tDBOutput_7 += ";appName=" + projectName + ";" + "";
				dbUser_tDBOutput_7 = "azure";

				final String decryptedPassword_tDBOutput_7 = routines.system.PasswordEncryptUtil
						.decryptPassword("4cdbb7d6ce1a91474d5f2279f21fdb4e");

				String dbPwd_tDBOutput_7 = decryptedPassword_tDBOutput_7;
				conn_tDBOutput_7 = java.sql.DriverManager.getConnection(
						url_tDBOutput_7, dbUser_tDBOutput_7, dbPwd_tDBOutput_7);

				resourceMap.put("conn_tDBOutput_7", conn_tDBOutput_7);

				conn_tDBOutput_7.setAutoCommit(false);
				int commitEvery_tDBOutput_7 = 10000;
				int commitCounter_tDBOutput_7 = 0;

				int batchSize_tDBOutput_7 = 10000;
				int batchSizeCounter_tDBOutput_7 = 0;

				if (dbschema_tDBOutput_7 == null
						|| dbschema_tDBOutput_7.trim().length() == 0) {
					tableName_tDBOutput_7 = "persona2";
				} else {
					tableName_tDBOutput_7 = dbschema_tDBOutput_7 + "].["
							+ "persona2";
				}
				int count_tDBOutput_7 = 0;

				String insert_tDBOutput_7 = "INSERT INTO ["
						+ tableName_tDBOutput_7
						+ "] ([A],[newColumn],[newColumn1],[newColumn2],[newColumn3],[newColumn4],[newColumn5],[newColumn6],[newColumn7],[newColumn8],[newColumn9],[newColumn10],[newColumn11],[newColumn12],[newColumn13],[newColumn14],[newColumn15]) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tDBOutput_7 = conn_tDBOutput_7
						.prepareStatement(insert_tDBOutput_7);

				/**
				 * [tDBOutput_7 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);

					}
				}

				int tos_count_tMap_1 = 0;

				class BytesLimit65535_tMap_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMap_1().limitLog4jByte();

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				out1Struct out1_tmp = new out1Struct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tConvertType_1 begin ] start
				 */

				ok_Hash.put("tConvertType_1", false);
				start_Hash.put("tConvertType_1", System.currentTimeMillis());

				currentComponent = "tConvertType_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);

					}
				}

				int tos_count_tConvertType_1 = 0;

				class BytesLimit65535_tConvertType_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tConvertType_1().limitLog4jByte();
				int nb_line_tConvertType_1 = 0;

				/**
				 * [tConvertType_1 begin ] stop
				 */

				/**
				 * [tFileInputExcel_1 begin ] start
				 */

				ok_Hash.put("tFileInputExcel_1", false);
				start_Hash.put("tFileInputExcel_1", System.currentTimeMillis());

				currentComponent = "tFileInputExcel_1";

				int tos_count_tFileInputExcel_1 = 0;

				class BytesLimit65535_tFileInputExcel_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileInputExcel_1().limitLog4jByte();

				class RegexUtil_tFileInputExcel_1 {

					public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
							org.apache.poi.xssf.usermodel.XSSFWorkbook workbook,
							String oneSheetName, boolean useRegex) {

						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

						if (useRegex) {// this part process the regex issue

							java.util.regex.Pattern pattern = java.util.regex.Pattern
									.compile(oneSheetName);
							for (org.apache.poi.ss.usermodel.Sheet sheet : workbook) {
								String sheetName = sheet.getSheetName();
								java.util.regex.Matcher matcher = pattern
										.matcher(sheetName);
								if (matcher.matches()) {
									if (sheet != null) {
										list.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet);
									}
								}
							}

						} else {
							org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook
									.getSheet(oneSheetName);
							if (sheet != null) {
								list.add(sheet);
							}

						}

						return list;
					}

					public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
							org.apache.poi.xssf.usermodel.XSSFWorkbook workbook,
							int index, boolean useRegex) {
						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
						org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook
								.getSheetAt(index);
						if (sheet != null) {
							list.add(sheet);
						}
						return list;
					}

				}
				RegexUtil_tFileInputExcel_1 regexUtil_tFileInputExcel_1 = new RegexUtil_tFileInputExcel_1();

				Object source_tFileInputExcel_1 = "C:/Users/PAUL LENOVO/Desktop/persona.xlsx";
				org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_1 = null;

				if (source_tFileInputExcel_1 instanceof String) {
					workbook_tFileInputExcel_1 = new org.apache.poi.xssf.usermodel.XSSFWorkbook(
							(String) source_tFileInputExcel_1);
				} else if (source_tFileInputExcel_1 instanceof java.io.InputStream) {
					workbook_tFileInputExcel_1 = new org.apache.poi.xssf.usermodel.XSSFWorkbook(
							(java.io.InputStream) source_tFileInputExcel_1);
				} else {
					workbook_tFileInputExcel_1 = null;
					throw new java.lang.Exception(
							"The data source should be specified as Inputstream or File Path!");
				}
				try {

					java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_1 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
					for (org.apache.poi.ss.usermodel.Sheet sheet_tFileInputExcel_1 : workbook_tFileInputExcel_1) {
						sheetList_tFileInputExcel_1
								.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet_tFileInputExcel_1);
					}
					if (sheetList_tFileInputExcel_1.size() <= 0) {
						throw new RuntimeException("Special sheets not exist!");
					}

					java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_1 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
					for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_1 : sheetList_tFileInputExcel_1) {
						if (sheet_FilterNull_tFileInputExcel_1 != null
								&& sheetList_FilterNull_tFileInputExcel_1
										.iterator() != null
								&& sheet_FilterNull_tFileInputExcel_1
										.iterator().hasNext()) {
							sheetList_FilterNull_tFileInputExcel_1
									.add(sheet_FilterNull_tFileInputExcel_1);
						}
					}
					sheetList_tFileInputExcel_1 = sheetList_FilterNull_tFileInputExcel_1;
					if (sheetList_tFileInputExcel_1.size() > 0) {
						int nb_line_tFileInputExcel_1 = 0;

						int begin_line_tFileInputExcel_1 = 0;

						int footer_input_tFileInputExcel_1 = 0;

						int end_line_tFileInputExcel_1 = 0;
						for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_1 : sheetList_tFileInputExcel_1) {
							end_line_tFileInputExcel_1 += (sheet_tFileInputExcel_1
									.getLastRowNum() + 1);
						}
						end_line_tFileInputExcel_1 -= footer_input_tFileInputExcel_1;
						int limit_tFileInputExcel_1 = -1;
						int start_column_tFileInputExcel_1 = 1 - 1;
						int end_column_tFileInputExcel_1 = -1;

						org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_1 = null;
						org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1
								.get(0);
						int rowCount_tFileInputExcel_1 = 0;
						int sheetIndex_tFileInputExcel_1 = 0;
						int currentRows_tFileInputExcel_1 = (sheetList_tFileInputExcel_1
								.get(0).getLastRowNum() + 1);

						// for the number format
						java.text.DecimalFormat df_tFileInputExcel_1 = new java.text.DecimalFormat(
								"#.####################################");
						char decimalChar_tFileInputExcel_1 = df_tFileInputExcel_1
								.getDecimalFormatSymbols()
								.getDecimalSeparator();

						for (int i_tFileInputExcel_1 = begin_line_tFileInputExcel_1; i_tFileInputExcel_1 < end_line_tFileInputExcel_1; i_tFileInputExcel_1++) {

							int emptyColumnCount_tFileInputExcel_1 = 0;

							if (limit_tFileInputExcel_1 != -1
									&& nb_line_tFileInputExcel_1 >= limit_tFileInputExcel_1) {
								break;
							}

							while (i_tFileInputExcel_1 >= rowCount_tFileInputExcel_1
									+ currentRows_tFileInputExcel_1) {
								rowCount_tFileInputExcel_1 += currentRows_tFileInputExcel_1;
								sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1
										.get(++sheetIndex_tFileInputExcel_1);
								currentRows_tFileInputExcel_1 = (sheet_tFileInputExcel_1
										.getLastRowNum() + 1);
							}
							globalMap.put("tFileInputExcel_1_CURRENT_SHEET",
									sheet_tFileInputExcel_1.getSheetName());
							if (rowCount_tFileInputExcel_1 <= i_tFileInputExcel_1) {
								row_tFileInputExcel_1 = sheet_tFileInputExcel_1
										.getRow(i_tFileInputExcel_1
												- rowCount_tFileInputExcel_1);
							}
							row1 = null;
							int tempRowLength_tFileInputExcel_1 = 18;

							int columnIndex_tFileInputExcel_1 = 0;

							String[] temp_row_tFileInputExcel_1 = new String[tempRowLength_tFileInputExcel_1];
							int excel_end_column_tFileInputExcel_1;
							if (row_tFileInputExcel_1 == null) {
								excel_end_column_tFileInputExcel_1 = 0;
							} else {
								excel_end_column_tFileInputExcel_1 = row_tFileInputExcel_1
										.getLastCellNum();
							}
							int actual_end_column_tFileInputExcel_1;
							if (end_column_tFileInputExcel_1 == -1) {
								actual_end_column_tFileInputExcel_1 = excel_end_column_tFileInputExcel_1;
							} else {
								actual_end_column_tFileInputExcel_1 = end_column_tFileInputExcel_1 > excel_end_column_tFileInputExcel_1 ? excel_end_column_tFileInputExcel_1
										: end_column_tFileInputExcel_1;
							}
							org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_1 = null;
							for (int i = 0; i < tempRowLength_tFileInputExcel_1; i++) {
								if (i + start_column_tFileInputExcel_1 < actual_end_column_tFileInputExcel_1) {
									org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_1 = row_tFileInputExcel_1
											.getCell(i
													+ start_column_tFileInputExcel_1);
									if (cell_tFileInputExcel_1 != null) {
										switch (cell_tFileInputExcel_1
												.getCellType()) {
										case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_STRING:
											temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1
													.getRichStringCellValue()
													.getString();
											break;
										case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC:
											if (org.apache.poi.ss.usermodel.DateUtil
													.isCellDateFormatted(cell_tFileInputExcel_1)) {
												temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1
														.getDateCellValue()
														.toString();
											} else {
												temp_row_tFileInputExcel_1[i] = df_tFileInputExcel_1
														.format(cell_tFileInputExcel_1
																.getNumericCellValue());
											}
											break;
										case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BOOLEAN:
											temp_row_tFileInputExcel_1[i] = String
													.valueOf(cell_tFileInputExcel_1
															.getBooleanCellValue());
											break;
										case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_FORMULA:
											switch (cell_tFileInputExcel_1
													.getCachedFormulaResultType()) {
											case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_STRING:
												temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1
														.getRichStringCellValue()
														.getString();
												break;
											case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC:
												if (org.apache.poi.ss.usermodel.DateUtil
														.isCellDateFormatted(cell_tFileInputExcel_1)) {
													temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1
															.getDateCellValue()
															.toString();
												} else {
													ne_tFileInputExcel_1 = new org.apache.poi.ss.formula.eval.NumberEval(
															cell_tFileInputExcel_1
																	.getNumericCellValue());
													temp_row_tFileInputExcel_1[i] = ne_tFileInputExcel_1
															.getStringValue();
												}
												break;
											case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BOOLEAN:
												temp_row_tFileInputExcel_1[i] = String
														.valueOf(cell_tFileInputExcel_1
																.getBooleanCellValue());
												break;
											default:
												temp_row_tFileInputExcel_1[i] = "";
											}
											break;
										default:
											temp_row_tFileInputExcel_1[i] = "";
										}
									} else {
										temp_row_tFileInputExcel_1[i] = "";
									}

								} else {
									temp_row_tFileInputExcel_1[i] = "";
								}
							}
							boolean whetherReject_tFileInputExcel_1 = false;
							row1 = new row1Struct();
							int curColNum_tFileInputExcel_1 = -1;
							String curColName_tFileInputExcel_1 = "";
							try {
								columnIndex_tFileInputExcel_1 = 0;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "A";

									row1.A = ParserUtils
											.parseTo_Integer(ParserUtils
													.parseTo_Number(
															temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1],
															null,
															'.' == decimalChar_tFileInputExcel_1 ? null
																	: decimalChar_tFileInputExcel_1));
								} else {
									row1.A = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 1;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "B";

									row1.B = ParserUtils
											.parseTo_Integer(ParserUtils
													.parseTo_Number(
															temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1],
															null,
															'.' == decimalChar_tFileInputExcel_1 ? null
																	: decimalChar_tFileInputExcel_1));
								} else {
									row1.B = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 2;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "C";

									row1.C = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									row1.C = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 3;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "D";

									row1.D = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									row1.D = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 4;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "E";

									row1.E = ParserUtils
											.parseTo_Long(ParserUtils
													.parseTo_Number(
															temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1],
															null,
															'.' == decimalChar_tFileInputExcel_1 ? null
																	: decimalChar_tFileInputExcel_1));
								} else {
									row1.E = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 5;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "F";

									row1.F = ParserUtils
											.parseTo_Long(ParserUtils
													.parseTo_Number(
															temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1],
															null,
															'.' == decimalChar_tFileInputExcel_1 ? null
																	: decimalChar_tFileInputExcel_1));
								} else {
									row1.F = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 6;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "G";

									row1.G = ParserUtils
											.parseTo_Long(ParserUtils
													.parseTo_Number(
															temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1],
															null,
															'.' == decimalChar_tFileInputExcel_1 ? null
																	: decimalChar_tFileInputExcel_1));
								} else {
									row1.G = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 7;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "H";

									row1.H = ParserUtils
											.parseTo_Integer(ParserUtils
													.parseTo_Number(
															temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1],
															null,
															'.' == decimalChar_tFileInputExcel_1 ? null
																	: decimalChar_tFileInputExcel_1));
								} else {
									row1.H = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 8;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "I";

									row1.I = ParserUtils
											.parseTo_Integer(ParserUtils
													.parseTo_Number(
															temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1],
															null,
															'.' == decimalChar_tFileInputExcel_1 ? null
																	: decimalChar_tFileInputExcel_1));
								} else {
									row1.I = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 9;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "J";

									row1.J = ParserUtils
											.parseTo_Integer(ParserUtils
													.parseTo_Number(
															temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1],
															null,
															'.' == decimalChar_tFileInputExcel_1 ? null
																	: decimalChar_tFileInputExcel_1));
								} else {
									row1.J = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 10;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "K";

									row1.K = ParserUtils
											.parseTo_Integer(ParserUtils
													.parseTo_Number(
															temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1],
															null,
															'.' == decimalChar_tFileInputExcel_1 ? null
																	: decimalChar_tFileInputExcel_1));
								} else {
									row1.K = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 11;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "L";

									row1.L = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									row1.L = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 12;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "M";

									row1.M = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									row1.M = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 13;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "N";

									row1.N = ParserUtils
											.parseTo_Integer(ParserUtils
													.parseTo_Number(
															temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1],
															null,
															'.' == decimalChar_tFileInputExcel_1 ? null
																	: decimalChar_tFileInputExcel_1));
								} else {
									row1.N = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 14;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "O";

									row1.O = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									row1.O = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 15;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "P";

									row1.P = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									row1.P = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 16;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "Q";

									row1.Q = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									row1.Q = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 17;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "R";

									row1.R = ParserUtils
											.parseTo_Integer(ParserUtils
													.parseTo_Number(
															temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1],
															null,
															'.' == decimalChar_tFileInputExcel_1 ? null
																	: decimalChar_tFileInputExcel_1));
								} else {
									row1.R = null;
									emptyColumnCount_tFileInputExcel_1++;
								}

								nb_line_tFileInputExcel_1++;

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputExcel_1 = true;
								System.err.println(e.getMessage());
								row1 = null;
							}

							/**
							 * [tFileInputExcel_1 begin ] stop
							 */

							/**
							 * [tFileInputExcel_1 main ] start
							 */

							currentComponent = "tFileInputExcel_1";

							tos_count_tFileInputExcel_1++;

							/**
							 * [tFileInputExcel_1 main ] stop
							 */

							/**
							 * [tFileInputExcel_1 process_data_begin ] start
							 */

							currentComponent = "tFileInputExcel_1";

							/**
							 * [tFileInputExcel_1 process_data_begin ] stop
							 */
							// Start of branch "row1"
							if (row1 != null) {

								/**
								 * [tConvertType_1 main ] start
								 */

								currentComponent = "tConvertType_1";

								// row1
								// row1

								if (execStat) {
									runStat.updateStatOnConnection("row1"
											+ iterateId, 1, 1);
								}

								row4 = new row4Struct();
								boolean bHasError_tConvertType_1 = false;
								try {
									row4.A = TypeConvert
											.Integer2Integer(row1.A);
								} catch (java.lang.Exception e) {
									bHasError_tConvertType_1 = true;
									System.err.println(e.getMessage());
								}
								try {
									row4.B = TypeConvert
											.Integer2Integer(row1.B);
								} catch (java.lang.Exception e) {
									bHasError_tConvertType_1 = true;
									System.err.println(e.getMessage());
								}
								try {
									row4.C = TypeConvert.String2String(row1.C);
								} catch (java.lang.Exception e) {
									bHasError_tConvertType_1 = true;
									System.err.println(e.getMessage());
								}
								try {
									row4.D = TypeConvert.String2String(row1.D);
								} catch (java.lang.Exception e) {
									bHasError_tConvertType_1 = true;
									System.err.println(e.getMessage());
								}
								try {
									row4.E = TypeConvert.Long2Long(row1.E);
								} catch (java.lang.Exception e) {
									bHasError_tConvertType_1 = true;
									System.err.println(e.getMessage());
								}
								try {
									row4.F = TypeConvert.Long2Long(row1.F);
								} catch (java.lang.Exception e) {
									bHasError_tConvertType_1 = true;
									System.err.println(e.getMessage());
								}
								try {
									row4.G = TypeConvert.Long2Long(row1.G);
								} catch (java.lang.Exception e) {
									bHasError_tConvertType_1 = true;
									System.err.println(e.getMessage());
								}
								try {
									row4.H = TypeConvert
											.Integer2Integer(row1.H);
								} catch (java.lang.Exception e) {
									bHasError_tConvertType_1 = true;
									System.err.println(e.getMessage());
								}
								try {
									row4.I = TypeConvert
											.Integer2Integer(row1.I);
								} catch (java.lang.Exception e) {
									bHasError_tConvertType_1 = true;
									System.err.println(e.getMessage());
								}
								try {
									row4.J = TypeConvert
											.Integer2Integer(row1.J);
								} catch (java.lang.Exception e) {
									bHasError_tConvertType_1 = true;
									System.err.println(e.getMessage());
								}
								try {
									row4.K = TypeConvert
											.Integer2Integer(row1.K);
								} catch (java.lang.Exception e) {
									bHasError_tConvertType_1 = true;
									System.err.println(e.getMessage());
								}
								try {
									row4.L = TypeConvert.String2String(row1.L);
								} catch (java.lang.Exception e) {
									bHasError_tConvertType_1 = true;
									System.err.println(e.getMessage());
								}
								try {
									row4.M = TypeConvert.String2String(row1.M);
								} catch (java.lang.Exception e) {
									bHasError_tConvertType_1 = true;
									System.err.println(e.getMessage());
								}
								try {
									row4.N = TypeConvert
											.Integer2Integer(row1.N);
								} catch (java.lang.Exception e) {
									bHasError_tConvertType_1 = true;
									System.err.println(e.getMessage());
								}
								try {
									row4.O = TypeConvert.String2String(row1.O);
								} catch (java.lang.Exception e) {
									bHasError_tConvertType_1 = true;
									System.err.println(e.getMessage());
								}
								try {
									row4.P = TypeConvert.String2String(row1.P);
								} catch (java.lang.Exception e) {
									bHasError_tConvertType_1 = true;
									System.err.println(e.getMessage());
								}
								try {
									row4.Q = TypeConvert.String2String(row1.Q);
								} catch (java.lang.Exception e) {
									bHasError_tConvertType_1 = true;
									System.err.println(e.getMessage());
								}
								try {
									row4.R = TypeConvert
											.Integer2Integer(row1.R);
								} catch (java.lang.Exception e) {
									bHasError_tConvertType_1 = true;
									System.err.println(e.getMessage());
								}
								if (bHasError_tConvertType_1) {
									row4 = null;
								}

								nb_line_tConvertType_1++;

								tos_count_tConvertType_1++;

								/**
								 * [tConvertType_1 main ] stop
								 */

								/**
								 * [tConvertType_1 process_data_begin ] start
								 */

								currentComponent = "tConvertType_1";

								/**
								 * [tConvertType_1 process_data_begin ] stop
								 */
								// Start of branch "row4"
								if (row4 != null) {

									/**
									 * [tMap_1 main ] start
									 */

									currentComponent = "tMap_1";

									// row4
									// row4

									if (execStat) {
										runStat.updateStatOnConnection("row4"
												+ iterateId, 1, 1);
									}

									boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

									// ###############################
									// # Input tables (lookups)
									boolean rejectedInnerJoin_tMap_1 = false;
									boolean mainRowRejected_tMap_1 = false;

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
										// ###############################
										// # Output tables

										out1 = null;

										// # Output table : 'out1'
										out1_tmp.persona = row4.A;
										out1_tmp.codigo = row4.B;
										out1_tmp.razonsocial = row4.C;
										out1_tmp.direccion = row4.D;
										out1_tmp.rucDNI = row4.E;
										out1_tmp.telefono1 = row4.F;
										out1_tmp.telefono2 = row4.G;
										out1_tmp.apellidoMaterno = row4.P;
										out1_tmp.apellidoPaterno = row4.Q;
										out1_tmp.nombre = row4.R;
										out1 = out1_tmp;
										// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_1 = false;

									tos_count_tMap_1++;

									/**
									 * [tMap_1 main ] stop
									 */

									/**
									 * [tMap_1 process_data_begin ] start
									 */

									currentComponent = "tMap_1";

									/**
									 * [tMap_1 process_data_begin ] stop
									 */
									// Start of branch "out1"
									if (out1 != null) {

										/**
										 * [tDBOutput_7 main ] start
										 */

										currentComponent = "tDBOutput_7";

										// out1
										// out1

										if (execStat) {
											runStat.updateStatOnConnection(
													"out1" + iterateId, 1, 1);
										}

										whetherReject_tDBOutput_7 = false;
										if (out1.A == null) {
											pstmt_tDBOutput_7.setNull(1,
													java.sql.Types.INTEGER);
										} else {
											pstmt_tDBOutput_7.setInt(1, out1.A);
										}

										if (out1.newColumn == null) {
											pstmt_tDBOutput_7.setNull(2,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_7.setString(2,
													out1.newColumn);
										}

										if (out1.newColumn1 == null) {
											pstmt_tDBOutput_7.setNull(3,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_7.setString(3,
													out1.newColumn1);
										}

										if (out1.newColumn2 == null) {
											pstmt_tDBOutput_7.setNull(4,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_7.setString(4,
													out1.newColumn2);
										}

										if (out1.newColumn3 == null) {
											pstmt_tDBOutput_7.setNull(5,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_7.setString(5,
													out1.newColumn3);
										}

										if (out1.newColumn4 == null) {
											pstmt_tDBOutput_7.setNull(6,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_7.setString(6,
													out1.newColumn4);
										}

										if (out1.newColumn5 == null) {
											pstmt_tDBOutput_7.setNull(7,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_7.setString(7,
													out1.newColumn5);
										}

										if (out1.newColumn6 == null) {
											pstmt_tDBOutput_7.setNull(8,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_7.setString(8,
													out1.newColumn6);
										}

										if (out1.newColumn7 == null) {
											pstmt_tDBOutput_7.setNull(9,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_7.setString(9,
													out1.newColumn7);
										}

										if (out1.newColumn8 == null) {
											pstmt_tDBOutput_7.setNull(10,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_7.setString(10,
													out1.newColumn8);
										}

										if (out1.newColumn9 == null) {
											pstmt_tDBOutput_7.setNull(11,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_7.setString(11,
													out1.newColumn9);
										}

										if (out1.newColumn10 == null) {
											pstmt_tDBOutput_7.setNull(12,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_7.setString(12,
													out1.newColumn10);
										}

										if (out1.newColumn11 == null) {
											pstmt_tDBOutput_7.setNull(13,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_7.setString(13,
													out1.newColumn11);
										}

										if (out1.newColumn12 == null) {
											pstmt_tDBOutput_7.setNull(14,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_7.setString(14,
													out1.newColumn12);
										}

										if (out1.newColumn13 == null) {
											pstmt_tDBOutput_7.setNull(15,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_7.setString(15,
													out1.newColumn13);
										}

										if (out1.newColumn14 == null) {
											pstmt_tDBOutput_7.setNull(16,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_7.setString(16,
													out1.newColumn14);
										}

										if (out1.newColumn15 == null) {
											pstmt_tDBOutput_7.setNull(17,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_7.setString(17,
													out1.newColumn15);
										}

										pstmt_tDBOutput_7.addBatch();
										nb_line_tDBOutput_7++;

										batchSizeCounter_tDBOutput_7++;

										// ////////batch execute by batch
										// size///////
										class LimitBytesHelper_tDBOutput_7 {
											public int limitBytePart1(
													int counter,
													java.sql.PreparedStatement pstmt_tDBOutput_7)
													throws Exception {
												try {

													for (int countEach_tDBOutput_7 : pstmt_tDBOutput_7
															.executeBatch()) {
														if (countEach_tDBOutput_7 == -2
																|| countEach_tDBOutput_7 == -3) {
															break;
														}
														counter += countEach_tDBOutput_7;
													}

												} catch (java.sql.BatchUpdateException e) {

													int countSum_tDBOutput_7 = 0;
													for (int countEach_tDBOutput_7 : e
															.getUpdateCounts()) {
														counter += (countEach_tDBOutput_7 < 0 ? 0
																: countEach_tDBOutput_7);
													}

													System.err.println(e
															.getMessage());

												}
												return counter;
											}

											public int limitBytePart2(
													int counter,
													java.sql.PreparedStatement pstmt_tDBOutput_7)
													throws Exception {
												try {

													for (int countEach_tDBOutput_7 : pstmt_tDBOutput_7
															.executeBatch()) {
														if (countEach_tDBOutput_7 == -2
																|| countEach_tDBOutput_7 == -3) {
															break;
														}
														counter += countEach_tDBOutput_7;
													}

												} catch (java.sql.BatchUpdateException e) {

													for (int countEach_tDBOutput_7 : e
															.getUpdateCounts()) {
														counter += (countEach_tDBOutput_7 < 0 ? 0
																: countEach_tDBOutput_7);
													}

													System.err.println(e
															.getMessage());

												}
												return counter;
											}
										}
										if ((batchSize_tDBOutput_7 > 0)
												&& (batchSize_tDBOutput_7 <= batchSizeCounter_tDBOutput_7)) {

											insertedCount_tDBOutput_7 = new LimitBytesHelper_tDBOutput_7()
													.limitBytePart1(
															insertedCount_tDBOutput_7,
															pstmt_tDBOutput_7);

											batchSizeCounter_tDBOutput_7 = 0;
										}

										// //////////commit every////////////

										commitCounter_tDBOutput_7++;
										if (commitEvery_tDBOutput_7 <= commitCounter_tDBOutput_7) {
											if ((batchSize_tDBOutput_7 > 0)
													&& (batchSizeCounter_tDBOutput_7 > 0)) {

												insertedCount_tDBOutput_7 = new LimitBytesHelper_tDBOutput_7()
														.limitBytePart1(
																insertedCount_tDBOutput_7,
																pstmt_tDBOutput_7);

												batchSizeCounter_tDBOutput_7 = 0;
											}

											conn_tDBOutput_7.commit();

											commitCounter_tDBOutput_7 = 0;
										}

										tos_count_tDBOutput_7++;

										/**
										 * [tDBOutput_7 main ] stop
										 */

										/**
										 * [tDBOutput_7 process_data_begin ]
										 * start
										 */

										currentComponent = "tDBOutput_7";

										/**
										 * [tDBOutput_7 process_data_begin ]
										 * stop
										 */

										/**
										 * [tDBOutput_7 process_data_end ] start
										 */

										currentComponent = "tDBOutput_7";

										/**
										 * [tDBOutput_7 process_data_end ] stop
										 */

									} // End of branch "out1"

									/**
									 * [tMap_1 process_data_end ] start
									 */

									currentComponent = "tMap_1";

									/**
									 * [tMap_1 process_data_end ] stop
									 */

								} // End of branch "row4"

								/**
								 * [tConvertType_1 process_data_end ] start
								 */

								currentComponent = "tConvertType_1";

								/**
								 * [tConvertType_1 process_data_end ] stop
								 */

							} // End of branch "row1"

							/**
							 * [tFileInputExcel_1 process_data_end ] start
							 */

							currentComponent = "tFileInputExcel_1";

							/**
							 * [tFileInputExcel_1 process_data_end ] stop
							 */

							/**
							 * [tFileInputExcel_1 end ] start
							 */

							currentComponent = "tFileInputExcel_1";

						}

						globalMap.put("tFileInputExcel_1_NB_LINE",
								nb_line_tFileInputExcel_1);

					}

				} finally {

					if (!(source_tFileInputExcel_1 instanceof java.io.InputStream)) {
						workbook_tFileInputExcel_1.getPackage().revert();
					}

				}

				ok_Hash.put("tFileInputExcel_1", true);
				end_Hash.put("tFileInputExcel_1", System.currentTimeMillis());

				/**
				 * [tFileInputExcel_1 end ] stop
				 */

				/**
				 * [tConvertType_1 end ] start
				 */

				currentComponent = "tConvertType_1";

				globalMap.put("tConvertType_1_NB_LINE", nb_line_tConvertType_1);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tConvertType_1", true);
				end_Hash.put("tConvertType_1", System.currentTimeMillis());

				/**
				 * [tConvertType_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row4" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tDBOutput_7 end ] start
				 */

				currentComponent = "tDBOutput_7";

				try {
					int countSum_tDBOutput_7 = 0;
					if (pstmt_tDBOutput_7 != null
							&& batchSizeCounter_tDBOutput_7 > 0) {

						for (int countEach_tDBOutput_7 : pstmt_tDBOutput_7
								.executeBatch()) {
							if (countEach_tDBOutput_7 == -2
									|| countEach_tDBOutput_7 == -3) {
								break;
							}
							countSum_tDBOutput_7 += countEach_tDBOutput_7;
						}

					}

					insertedCount_tDBOutput_7 += countSum_tDBOutput_7;

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tDBOutput_7 = 0;
					for (int countEach_tDBOutput_7 : e.getUpdateCounts()) {
						countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0
								: countEach_tDBOutput_7);
					}

					insertedCount_tDBOutput_7 += countSum_tDBOutput_7;

					System.err.println(e.getMessage());

				}
				if (pstmt_tDBOutput_7 != null) {

					pstmt_tDBOutput_7.close();

				}

				conn_tDBOutput_7.commit();

				conn_tDBOutput_7.close();
				resourceMap.put("finish_tDBOutput_7", true);

				nb_line_deleted_tDBOutput_7 = nb_line_deleted_tDBOutput_7
						+ deletedCount_tDBOutput_7;
				nb_line_update_tDBOutput_7 = nb_line_update_tDBOutput_7
						+ updatedCount_tDBOutput_7;
				nb_line_inserted_tDBOutput_7 = nb_line_inserted_tDBOutput_7
						+ insertedCount_tDBOutput_7;
				nb_line_rejected_tDBOutput_7 = nb_line_rejected_tDBOutput_7
						+ rejectedCount_tDBOutput_7;

				globalMap.put("tDBOutput_7_NB_LINE", nb_line_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_7);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("out1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_7", true);
				end_Hash.put("tDBOutput_7", System.currentTimeMillis());

				/**
				 * [tDBOutput_7 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputExcel_1 finally ] start
				 */

				currentComponent = "tFileInputExcel_1";

				/**
				 * [tFileInputExcel_1 finally ] stop
				 */

				/**
				 * [tConvertType_1 finally ] start
				 */

				currentComponent = "tConvertType_1";

				/**
				 * [tConvertType_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tDBOutput_7 finally ] start
				 */

				currentComponent = "tDBOutput_7";

				if (resourceMap.get("finish_tDBOutput_7") == null) {
					if (resourceMap.get("conn_tDBOutput_7") != null) {
						try {

							java.sql.Connection ctn_tDBOutput_7 = (java.sql.Connection) resourceMap
									.get("conn_tDBOutput_7");

							ctn_tDBOutput_7.close();

						} catch (java.sql.SQLException sqlEx_tDBOutput_7) {
							String errorMessage_tDBOutput_7 = "failed to close the connection in tDBOutput_7 :"
									+ sqlEx_tDBOutput_7.getMessage();

							System.err.println(errorMessage_tDBOutput_7);
						}
					}
				}

				/**
				 * [tDBOutput_7 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 1);
	}

	public static class convert2Struct implements
			routines.system.IPersistableRow<convert2Struct> {
		final static byte[] commonByteArrayLock_PROYECTO_BI_carga_excel = new byte[0];
		static byte[] commonByteArray_PROYECTO_BI_carga_excel = new byte[0];

		public String tipoDocumento;

		public String getTipoDocumento() {
			return this.tipoDocumento;
		}

		public String codigoDocumento;

		public String getCodigoDocumento() {
			return this.codigoDocumento;
		}

		public String nombreDocumento;

		public String getNombreDocumento() {
			return this.nombreDocumento;
		}

		public String numeroLineas;

		public String getNumeroLineas() {
			return this.numeroLineas;
		}

		public String abrevia;

		public String getAbrevia() {
			return this.abrevia;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROYECTO_BI_carga_excel.length) {
					if (length < 1024
							&& commonByteArray_PROYECTO_BI_carga_excel.length == 0) {
						commonByteArray_PROYECTO_BI_carga_excel = new byte[1024];
					} else {
						commonByteArray_PROYECTO_BI_carga_excel = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROYECTO_BI_carga_excel, 0,
						length);
				strReturn = new String(commonByteArray_PROYECTO_BI_carga_excel,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROYECTO_BI_carga_excel) {

				try {

					int length = 0;

					this.tipoDocumento = readString(dis);

					this.codigoDocumento = readString(dis);

					this.nombreDocumento = readString(dis);

					this.numeroLineas = readString(dis);

					this.abrevia = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.tipoDocumento, dos);

				// String

				writeString(this.codigoDocumento, dos);

				// String

				writeString(this.nombreDocumento, dos);

				// String

				writeString(this.numeroLineas, dos);

				// String

				writeString(this.abrevia, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("tipoDocumento=" + tipoDocumento);
			sb.append(",codigoDocumento=" + codigoDocumento);
			sb.append(",nombreDocumento=" + nombreDocumento);
			sb.append(",numeroLineas=" + numeroLineas);
			sb.append(",abrevia=" + abrevia);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(convert2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_PROYECTO_BI_carga_excel = new byte[0];
		static byte[] commonByteArray_PROYECTO_BI_carga_excel = new byte[0];

		public Integer A;

		public Integer getA() {
			return this.A;
		}

		public String B;

		public String getB() {
			return this.B;
		}

		public String C;

		public String getC() {
			return this.C;
		}

		public Integer D;

		public Integer getD() {
			return this.D;
		}

		public String E;

		public String getE() {
			return this.E;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROYECTO_BI_carga_excel.length) {
					if (length < 1024
							&& commonByteArray_PROYECTO_BI_carga_excel.length == 0) {
						commonByteArray_PROYECTO_BI_carga_excel = new byte[1024];
					} else {
						commonByteArray_PROYECTO_BI_carga_excel = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROYECTO_BI_carga_excel, 0,
						length);
				strReturn = new String(commonByteArray_PROYECTO_BI_carga_excel,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROYECTO_BI_carga_excel) {

				try {

					int length = 0;

					this.A = readInteger(dis);

					this.B = readString(dis);

					this.C = readString(dis);

					this.D = readInteger(dis);

					this.E = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.A, dos);

				// String

				writeString(this.B, dos);

				// String

				writeString(this.C, dos);

				// Integer

				writeInteger(this.D, dos);

				// String

				writeString(this.E, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("A=" + String.valueOf(A));
			sb.append(",B=" + B);
			sb.append(",C=" + C);
			sb.append(",D=" + String.valueOf(D));
			sb.append(",E=" + E);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_PROYECTO_BI_carga_excel = new byte[0];
		static byte[] commonByteArray_PROYECTO_BI_carga_excel = new byte[0];

		public Integer A;

		public Integer getA() {
			return this.A;
		}

		public String B;

		public String getB() {
			return this.B;
		}

		public String C;

		public String getC() {
			return this.C;
		}

		public Integer D;

		public Integer getD() {
			return this.D;
		}

		public String E;

		public String getE() {
			return this.E;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROYECTO_BI_carga_excel.length) {
					if (length < 1024
							&& commonByteArray_PROYECTO_BI_carga_excel.length == 0) {
						commonByteArray_PROYECTO_BI_carga_excel = new byte[1024];
					} else {
						commonByteArray_PROYECTO_BI_carga_excel = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROYECTO_BI_carga_excel, 0,
						length);
				strReturn = new String(commonByteArray_PROYECTO_BI_carga_excel,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROYECTO_BI_carga_excel) {

				try {

					int length = 0;

					this.A = readInteger(dis);

					this.B = readString(dis);

					this.C = readString(dis);

					this.D = readInteger(dis);

					this.E = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.A, dos);

				// String

				writeString(this.B, dos);

				// String

				writeString(this.C, dos);

				// Integer

				writeInteger(this.D, dos);

				// String

				writeString(this.E, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("A=" + String.valueOf(A));
			sb.append(",B=" + B);
			sb.append(",C=" + C);
			sb.append(",D=" + String.valueOf(D));
			sb.append(",E=" + E);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputExcel_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputExcel_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();
				row5Struct row5 = new row5Struct();
				convert2Struct convert2 = new convert2Struct();

				/**
				 * [tDBOutput_9 begin ] start
				 */

				ok_Hash.put("tDBOutput_9", false);
				start_Hash.put("tDBOutput_9", System.currentTimeMillis());

				currentComponent = "tDBOutput_9";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("convert2" + iterateId,
								0, 0);

					}
				}

				int tos_count_tDBOutput_9 = 0;

				class BytesLimit65535_tDBOutput_9 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBOutput_9().limitLog4jByte();

				int nb_line_tDBOutput_9 = 0;
				int nb_line_update_tDBOutput_9 = 0;
				int nb_line_inserted_tDBOutput_9 = 0;
				int nb_line_deleted_tDBOutput_9 = 0;
				int nb_line_rejected_tDBOutput_9 = 0;

				int deletedCount_tDBOutput_9 = 0;
				int updatedCount_tDBOutput_9 = 0;
				int insertedCount_tDBOutput_9 = 0;
				int rejectedCount_tDBOutput_9 = 0;
				String dbschema_tDBOutput_9 = null;
				String tableName_tDBOutput_9 = null;
				boolean whetherReject_tDBOutput_9 = false;

				java.util.Calendar calendar_tDBOutput_9 = java.util.Calendar
						.getInstance();
				long year1_tDBOutput_9 = TalendDate.parseDate("yyyy-MM-dd",
						"0001-01-01").getTime();
				long year2_tDBOutput_9 = TalendDate.parseDate("yyyy-MM-dd",
						"1753-01-01").getTime();
				long year10000_tDBOutput_9 = TalendDate.parseDate(
						"yyyy-MM-dd HH:mm:ss", "9999-12-31 24:00:00").getTime();
				long date_tDBOutput_9;

				java.util.Calendar calendar_datetimeoffset_tDBOutput_9 = java.util.Calendar
						.getInstance(java.util.TimeZone.getTimeZone("UTC"));

				java.sql.Connection conn_tDBOutput_9 = null;
				String dbUser_tDBOutput_9 = null;
				dbschema_tDBOutput_9 = "";
				String driverClass_tDBOutput_9 = "net.sourceforge.jtds.jdbc.Driver";

				java.lang.Class.forName(driverClass_tDBOutput_9);
				String port_tDBOutput_9 = "1433";
				String dbname_tDBOutput_9 = "RETAIL";
				String url_tDBOutput_9 = "jdbc:jtds:sqlserver://"
						+ "ljc-sql-server.database.windows.net";
				if (!"".equals(port_tDBOutput_9)) {
					url_tDBOutput_9 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBOutput_9)) {
					url_tDBOutput_9 += "//" + "RETAIL";

				}
				url_tDBOutput_9 += ";appName=" + projectName + ";" + "";
				dbUser_tDBOutput_9 = "azure";

				final String decryptedPassword_tDBOutput_9 = routines.system.PasswordEncryptUtil
						.decryptPassword("4cdbb7d6ce1a91474d5f2279f21fdb4e");

				String dbPwd_tDBOutput_9 = decryptedPassword_tDBOutput_9;
				conn_tDBOutput_9 = java.sql.DriverManager.getConnection(
						url_tDBOutput_9, dbUser_tDBOutput_9, dbPwd_tDBOutput_9);

				resourceMap.put("conn_tDBOutput_9", conn_tDBOutput_9);

				conn_tDBOutput_9.setAutoCommit(false);
				int commitEvery_tDBOutput_9 = 10000;
				int commitCounter_tDBOutput_9 = 0;

				int batchSize_tDBOutput_9 = 10000;
				int batchSizeCounter_tDBOutput_9 = 0;

				if (dbschema_tDBOutput_9 == null
						|| dbschema_tDBOutput_9.trim().length() == 0) {
					tableName_tDBOutput_9 = "";
				} else {
					tableName_tDBOutput_9 = dbschema_tDBOutput_9 + "].[" + "";
				}
				int count_tDBOutput_9 = 0;

				String insert_tDBOutput_9 = "INSERT INTO ["
						+ tableName_tDBOutput_9
						+ "] ([tipoDocumento],[codigoDocumento],[nombreDocumento],[numeroLineas],[abrevia]) VALUES (?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tDBOutput_9 = conn_tDBOutput_9
						.prepareStatement(insert_tDBOutput_9);

				/**
				 * [tDBOutput_9 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row5" + iterateId, 0, 0);

					}
				}

				int tos_count_tMap_2 = 0;

				class BytesLimit65535_tMap_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMap_2().limitLog4jByte();

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				convert2Struct convert2_tmp = new convert2Struct();
				// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tConvertType_2 begin ] start
				 */

				ok_Hash.put("tConvertType_2", false);
				start_Hash.put("tConvertType_2", System.currentTimeMillis());

				currentComponent = "tConvertType_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);

					}
				}

				int tos_count_tConvertType_2 = 0;

				class BytesLimit65535_tConvertType_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tConvertType_2().limitLog4jByte();
				int nb_line_tConvertType_2 = 0;

				/**
				 * [tConvertType_2 begin ] stop
				 */

				/**
				 * [tFileInputExcel_2 begin ] start
				 */

				ok_Hash.put("tFileInputExcel_2", false);
				start_Hash.put("tFileInputExcel_2", System.currentTimeMillis());

				currentComponent = "tFileInputExcel_2";

				int tos_count_tFileInputExcel_2 = 0;

				class BytesLimit65535_tFileInputExcel_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileInputExcel_2().limitLog4jByte();

				class RegexUtil_tFileInputExcel_2 {

					public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
							org.apache.poi.xssf.usermodel.XSSFWorkbook workbook,
							String oneSheetName, boolean useRegex) {

						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

						if (useRegex) {// this part process the regex issue

							java.util.regex.Pattern pattern = java.util.regex.Pattern
									.compile(oneSheetName);
							for (org.apache.poi.ss.usermodel.Sheet sheet : workbook) {
								String sheetName = sheet.getSheetName();
								java.util.regex.Matcher matcher = pattern
										.matcher(sheetName);
								if (matcher.matches()) {
									if (sheet != null) {
										list.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet);
									}
								}
							}

						} else {
							org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook
									.getSheet(oneSheetName);
							if (sheet != null) {
								list.add(sheet);
							}

						}

						return list;
					}

					public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
							org.apache.poi.xssf.usermodel.XSSFWorkbook workbook,
							int index, boolean useRegex) {
						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
						org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook
								.getSheetAt(index);
						if (sheet != null) {
							list.add(sheet);
						}
						return list;
					}

				}
				RegexUtil_tFileInputExcel_2 regexUtil_tFileInputExcel_2 = new RegexUtil_tFileInputExcel_2();

				Object source_tFileInputExcel_2 = "D:/OpenStudio/TOS_DI-Win32-20180411_1414-V7.0.1/workspace/PROYECTO_BI/excel/tipodocumento.xlsx";
				org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_2 = null;

				if (source_tFileInputExcel_2 instanceof String) {
					workbook_tFileInputExcel_2 = new org.apache.poi.xssf.usermodel.XSSFWorkbook(
							(String) source_tFileInputExcel_2);
				} else if (source_tFileInputExcel_2 instanceof java.io.InputStream) {
					workbook_tFileInputExcel_2 = new org.apache.poi.xssf.usermodel.XSSFWorkbook(
							(java.io.InputStream) source_tFileInputExcel_2);
				} else {
					workbook_tFileInputExcel_2 = null;
					throw new java.lang.Exception(
							"The data source should be specified as Inputstream or File Path!");
				}
				try {

					java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_2 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
					for (org.apache.poi.ss.usermodel.Sheet sheet_tFileInputExcel_2 : workbook_tFileInputExcel_2) {
						sheetList_tFileInputExcel_2
								.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet_tFileInputExcel_2);
					}
					if (sheetList_tFileInputExcel_2.size() <= 0) {
						throw new RuntimeException("Special sheets not exist!");
					}

					java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_2 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
					for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_2 : sheetList_tFileInputExcel_2) {
						if (sheet_FilterNull_tFileInputExcel_2 != null
								&& sheetList_FilterNull_tFileInputExcel_2
										.iterator() != null
								&& sheet_FilterNull_tFileInputExcel_2
										.iterator().hasNext()) {
							sheetList_FilterNull_tFileInputExcel_2
									.add(sheet_FilterNull_tFileInputExcel_2);
						}
					}
					sheetList_tFileInputExcel_2 = sheetList_FilterNull_tFileInputExcel_2;
					if (sheetList_tFileInputExcel_2.size() > 0) {
						int nb_line_tFileInputExcel_2 = 0;

						int begin_line_tFileInputExcel_2 = 0;

						int footer_input_tFileInputExcel_2 = 0;

						int end_line_tFileInputExcel_2 = 0;
						for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_2 : sheetList_tFileInputExcel_2) {
							end_line_tFileInputExcel_2 += (sheet_tFileInputExcel_2
									.getLastRowNum() + 1);
						}
						end_line_tFileInputExcel_2 -= footer_input_tFileInputExcel_2;
						int limit_tFileInputExcel_2 = -1;
						int start_column_tFileInputExcel_2 = 1 - 1;
						int end_column_tFileInputExcel_2 = -1;

						org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_2 = null;
						org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_2 = sheetList_tFileInputExcel_2
								.get(0);
						int rowCount_tFileInputExcel_2 = 0;
						int sheetIndex_tFileInputExcel_2 = 0;
						int currentRows_tFileInputExcel_2 = (sheetList_tFileInputExcel_2
								.get(0).getLastRowNum() + 1);

						// for the number format
						java.text.DecimalFormat df_tFileInputExcel_2 = new java.text.DecimalFormat(
								"#.####################################");
						char decimalChar_tFileInputExcel_2 = df_tFileInputExcel_2
								.getDecimalFormatSymbols()
								.getDecimalSeparator();

						for (int i_tFileInputExcel_2 = begin_line_tFileInputExcel_2; i_tFileInputExcel_2 < end_line_tFileInputExcel_2; i_tFileInputExcel_2++) {

							int emptyColumnCount_tFileInputExcel_2 = 0;

							if (limit_tFileInputExcel_2 != -1
									&& nb_line_tFileInputExcel_2 >= limit_tFileInputExcel_2) {
								break;
							}

							while (i_tFileInputExcel_2 >= rowCount_tFileInputExcel_2
									+ currentRows_tFileInputExcel_2) {
								rowCount_tFileInputExcel_2 += currentRows_tFileInputExcel_2;
								sheet_tFileInputExcel_2 = sheetList_tFileInputExcel_2
										.get(++sheetIndex_tFileInputExcel_2);
								currentRows_tFileInputExcel_2 = (sheet_tFileInputExcel_2
										.getLastRowNum() + 1);
							}
							globalMap.put("tFileInputExcel_2_CURRENT_SHEET",
									sheet_tFileInputExcel_2.getSheetName());
							if (rowCount_tFileInputExcel_2 <= i_tFileInputExcel_2) {
								row_tFileInputExcel_2 = sheet_tFileInputExcel_2
										.getRow(i_tFileInputExcel_2
												- rowCount_tFileInputExcel_2);
							}
							row2 = null;
							int tempRowLength_tFileInputExcel_2 = 5;

							int columnIndex_tFileInputExcel_2 = 0;

							String[] temp_row_tFileInputExcel_2 = new String[tempRowLength_tFileInputExcel_2];
							int excel_end_column_tFileInputExcel_2;
							if (row_tFileInputExcel_2 == null) {
								excel_end_column_tFileInputExcel_2 = 0;
							} else {
								excel_end_column_tFileInputExcel_2 = row_tFileInputExcel_2
										.getLastCellNum();
							}
							int actual_end_column_tFileInputExcel_2;
							if (end_column_tFileInputExcel_2 == -1) {
								actual_end_column_tFileInputExcel_2 = excel_end_column_tFileInputExcel_2;
							} else {
								actual_end_column_tFileInputExcel_2 = end_column_tFileInputExcel_2 > excel_end_column_tFileInputExcel_2 ? excel_end_column_tFileInputExcel_2
										: end_column_tFileInputExcel_2;
							}
							org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_2 = null;
							for (int i = 0; i < tempRowLength_tFileInputExcel_2; i++) {
								if (i + start_column_tFileInputExcel_2 < actual_end_column_tFileInputExcel_2) {
									org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_2 = row_tFileInputExcel_2
											.getCell(i
													+ start_column_tFileInputExcel_2);
									if (cell_tFileInputExcel_2 != null) {
										switch (cell_tFileInputExcel_2
												.getCellType()) {
										case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_STRING:
											temp_row_tFileInputExcel_2[i] = cell_tFileInputExcel_2
													.getRichStringCellValue()
													.getString();
											break;
										case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC:
											if (org.apache.poi.ss.usermodel.DateUtil
													.isCellDateFormatted(cell_tFileInputExcel_2)) {
												temp_row_tFileInputExcel_2[i] = cell_tFileInputExcel_2
														.getDateCellValue()
														.toString();
											} else {
												temp_row_tFileInputExcel_2[i] = df_tFileInputExcel_2
														.format(cell_tFileInputExcel_2
																.getNumericCellValue());
											}
											break;
										case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BOOLEAN:
											temp_row_tFileInputExcel_2[i] = String
													.valueOf(cell_tFileInputExcel_2
															.getBooleanCellValue());
											break;
										case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_FORMULA:
											switch (cell_tFileInputExcel_2
													.getCachedFormulaResultType()) {
											case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_STRING:
												temp_row_tFileInputExcel_2[i] = cell_tFileInputExcel_2
														.getRichStringCellValue()
														.getString();
												break;
											case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC:
												if (org.apache.poi.ss.usermodel.DateUtil
														.isCellDateFormatted(cell_tFileInputExcel_2)) {
													temp_row_tFileInputExcel_2[i] = cell_tFileInputExcel_2
															.getDateCellValue()
															.toString();
												} else {
													ne_tFileInputExcel_2 = new org.apache.poi.ss.formula.eval.NumberEval(
															cell_tFileInputExcel_2
																	.getNumericCellValue());
													temp_row_tFileInputExcel_2[i] = ne_tFileInputExcel_2
															.getStringValue();
												}
												break;
											case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BOOLEAN:
												temp_row_tFileInputExcel_2[i] = String
														.valueOf(cell_tFileInputExcel_2
																.getBooleanCellValue());
												break;
											default:
												temp_row_tFileInputExcel_2[i] = "";
											}
											break;
										default:
											temp_row_tFileInputExcel_2[i] = "";
										}
									} else {
										temp_row_tFileInputExcel_2[i] = "";
									}

								} else {
									temp_row_tFileInputExcel_2[i] = "";
								}
							}
							boolean whetherReject_tFileInputExcel_2 = false;
							row2 = new row2Struct();
							int curColNum_tFileInputExcel_2 = -1;
							String curColName_tFileInputExcel_2 = "";
							try {
								columnIndex_tFileInputExcel_2 = 0;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2
											+ 1;
									curColName_tFileInputExcel_2 = "A";

									row2.A = ParserUtils
											.parseTo_Integer(ParserUtils
													.parseTo_Number(
															temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2],
															null,
															'.' == decimalChar_tFileInputExcel_2 ? null
																	: decimalChar_tFileInputExcel_2));
								} else {
									row2.A = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 1;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2
											+ 1;
									curColName_tFileInputExcel_2 = "B";

									row2.B = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
								} else {
									row2.B = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 2;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2
											+ 1;
									curColName_tFileInputExcel_2 = "C";

									row2.C = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
								} else {
									row2.C = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 3;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2
											+ 1;
									curColName_tFileInputExcel_2 = "D";

									row2.D = ParserUtils
											.parseTo_Integer(ParserUtils
													.parseTo_Number(
															temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2],
															null,
															'.' == decimalChar_tFileInputExcel_2 ? null
																	: decimalChar_tFileInputExcel_2));
								} else {
									row2.D = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 4;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2
											+ 1;
									curColName_tFileInputExcel_2 = "E";

									row2.E = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
								} else {
									row2.E = null;
									emptyColumnCount_tFileInputExcel_2++;
								}

								nb_line_tFileInputExcel_2++;

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputExcel_2 = true;
								System.err.println(e.getMessage());
								row2 = null;
							}

							/**
							 * [tFileInputExcel_2 begin ] stop
							 */

							/**
							 * [tFileInputExcel_2 main ] start
							 */

							currentComponent = "tFileInputExcel_2";

							tos_count_tFileInputExcel_2++;

							/**
							 * [tFileInputExcel_2 main ] stop
							 */

							/**
							 * [tFileInputExcel_2 process_data_begin ] start
							 */

							currentComponent = "tFileInputExcel_2";

							/**
							 * [tFileInputExcel_2 process_data_begin ] stop
							 */
							// Start of branch "row2"
							if (row2 != null) {

								/**
								 * [tConvertType_2 main ] start
								 */

								currentComponent = "tConvertType_2";

								// row2
								// row2

								if (execStat) {
									runStat.updateStatOnConnection("row2"
											+ iterateId, 1, 1);
								}

								row5 = new row5Struct();
								boolean bHasError_tConvertType_2 = false;
								try {
									row5.A = TypeConvert
											.Integer2Integer(row2.A);
								} catch (java.lang.Exception e) {
									bHasError_tConvertType_2 = true;
									System.err.println(e.getMessage());
								}
								try {
									row5.B = TypeConvert.String2String(row2.B);
								} catch (java.lang.Exception e) {
									bHasError_tConvertType_2 = true;
									System.err.println(e.getMessage());
								}
								try {
									row5.C = TypeConvert.String2String(row2.C);
								} catch (java.lang.Exception e) {
									bHasError_tConvertType_2 = true;
									System.err.println(e.getMessage());
								}
								try {
									row5.D = TypeConvert
											.Integer2Integer(row2.D);
								} catch (java.lang.Exception e) {
									bHasError_tConvertType_2 = true;
									System.err.println(e.getMessage());
								}
								try {
									row5.E = TypeConvert.String2String(row2.E);
								} catch (java.lang.Exception e) {
									bHasError_tConvertType_2 = true;
									System.err.println(e.getMessage());
								}
								if (bHasError_tConvertType_2) {
									row5 = null;
								}

								nb_line_tConvertType_2++;

								tos_count_tConvertType_2++;

								/**
								 * [tConvertType_2 main ] stop
								 */

								/**
								 * [tConvertType_2 process_data_begin ] start
								 */

								currentComponent = "tConvertType_2";

								/**
								 * [tConvertType_2 process_data_begin ] stop
								 */
								// Start of branch "row5"
								if (row5 != null) {

									/**
									 * [tMap_2 main ] start
									 */

									currentComponent = "tMap_2";

									// row5
									// row5

									if (execStat) {
										runStat.updateStatOnConnection("row5"
												+ iterateId, 1, 1);
									}

									boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

									// ###############################
									// # Input tables (lookups)
									boolean rejectedInnerJoin_tMap_2 = false;
									boolean mainRowRejected_tMap_2 = false;

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
										// ###############################
										// # Output tables

										convert2 = null;

										// # Output table : 'convert2'
										convert2_tmp.tipoDocumento = row5.A;
										convert2_tmp.codigoDocumento = row5.B;
										convert2_tmp.nombreDocumento = row5.C;
										convert2_tmp.numeroLineas = row5.D;
										convert2_tmp.abrevia = row5.E;
										convert2 = convert2_tmp;
										// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_2 = false;

									tos_count_tMap_2++;

									/**
									 * [tMap_2 main ] stop
									 */

									/**
									 * [tMap_2 process_data_begin ] start
									 */

									currentComponent = "tMap_2";

									/**
									 * [tMap_2 process_data_begin ] stop
									 */
									// Start of branch "convert2"
									if (convert2 != null) {

										/**
										 * [tDBOutput_9 main ] start
										 */

										currentComponent = "tDBOutput_9";

										// convert2
										// convert2

										if (execStat) {
											runStat.updateStatOnConnection(
													"convert2" + iterateId, 1,
													1);
										}

										whetherReject_tDBOutput_9 = false;
										if (convert2.tipoDocumento == null) {
											pstmt_tDBOutput_9.setNull(1,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_9.setString(1,
													convert2.tipoDocumento);
										}

										if (convert2.codigoDocumento == null) {
											pstmt_tDBOutput_9.setNull(2,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_9.setString(2,
													convert2.codigoDocumento);
										}

										if (convert2.nombreDocumento == null) {
											pstmt_tDBOutput_9.setNull(3,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_9.setString(3,
													convert2.nombreDocumento);
										}

										if (convert2.numeroLineas == null) {
											pstmt_tDBOutput_9.setNull(4,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_9.setString(4,
													convert2.numeroLineas);
										}

										if (convert2.abrevia == null) {
											pstmt_tDBOutput_9.setNull(5,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_9.setString(5,
													convert2.abrevia);
										}

										pstmt_tDBOutput_9.addBatch();
										nb_line_tDBOutput_9++;

										batchSizeCounter_tDBOutput_9++;

										// ////////batch execute by batch
										// size///////
										class LimitBytesHelper_tDBOutput_9 {
											public int limitBytePart1(
													int counter,
													java.sql.PreparedStatement pstmt_tDBOutput_9)
													throws Exception {
												try {

													for (int countEach_tDBOutput_9 : pstmt_tDBOutput_9
															.executeBatch()) {
														if (countEach_tDBOutput_9 == -2
																|| countEach_tDBOutput_9 == -3) {
															break;
														}
														counter += countEach_tDBOutput_9;
													}

												} catch (java.sql.BatchUpdateException e) {

													int countSum_tDBOutput_9 = 0;
													for (int countEach_tDBOutput_9 : e
															.getUpdateCounts()) {
														counter += (countEach_tDBOutput_9 < 0 ? 0
																: countEach_tDBOutput_9);
													}

													System.err.println(e
															.getMessage());

												}
												return counter;
											}

											public int limitBytePart2(
													int counter,
													java.sql.PreparedStatement pstmt_tDBOutput_9)
													throws Exception {
												try {

													for (int countEach_tDBOutput_9 : pstmt_tDBOutput_9
															.executeBatch()) {
														if (countEach_tDBOutput_9 == -2
																|| countEach_tDBOutput_9 == -3) {
															break;
														}
														counter += countEach_tDBOutput_9;
													}

												} catch (java.sql.BatchUpdateException e) {

													for (int countEach_tDBOutput_9 : e
															.getUpdateCounts()) {
														counter += (countEach_tDBOutput_9 < 0 ? 0
																: countEach_tDBOutput_9);
													}

													System.err.println(e
															.getMessage());

												}
												return counter;
											}
										}
										if ((batchSize_tDBOutput_9 > 0)
												&& (batchSize_tDBOutput_9 <= batchSizeCounter_tDBOutput_9)) {

											insertedCount_tDBOutput_9 = new LimitBytesHelper_tDBOutput_9()
													.limitBytePart1(
															insertedCount_tDBOutput_9,
															pstmt_tDBOutput_9);

											batchSizeCounter_tDBOutput_9 = 0;
										}

										// //////////commit every////////////

										commitCounter_tDBOutput_9++;
										if (commitEvery_tDBOutput_9 <= commitCounter_tDBOutput_9) {
											if ((batchSize_tDBOutput_9 > 0)
													&& (batchSizeCounter_tDBOutput_9 > 0)) {

												insertedCount_tDBOutput_9 = new LimitBytesHelper_tDBOutput_9()
														.limitBytePart1(
																insertedCount_tDBOutput_9,
																pstmt_tDBOutput_9);

												batchSizeCounter_tDBOutput_9 = 0;
											}

											conn_tDBOutput_9.commit();

											commitCounter_tDBOutput_9 = 0;
										}

										tos_count_tDBOutput_9++;

										/**
										 * [tDBOutput_9 main ] stop
										 */

										/**
										 * [tDBOutput_9 process_data_begin ]
										 * start
										 */

										currentComponent = "tDBOutput_9";

										/**
										 * [tDBOutput_9 process_data_begin ]
										 * stop
										 */

										/**
										 * [tDBOutput_9 process_data_end ] start
										 */

										currentComponent = "tDBOutput_9";

										/**
										 * [tDBOutput_9 process_data_end ] stop
										 */

									} // End of branch "convert2"

									/**
									 * [tMap_2 process_data_end ] start
									 */

									currentComponent = "tMap_2";

									/**
									 * [tMap_2 process_data_end ] stop
									 */

								} // End of branch "row5"

								/**
								 * [tConvertType_2 process_data_end ] start
								 */

								currentComponent = "tConvertType_2";

								/**
								 * [tConvertType_2 process_data_end ] stop
								 */

							} // End of branch "row2"

							/**
							 * [tFileInputExcel_2 process_data_end ] start
							 */

							currentComponent = "tFileInputExcel_2";

							/**
							 * [tFileInputExcel_2 process_data_end ] stop
							 */

							/**
							 * [tFileInputExcel_2 end ] start
							 */

							currentComponent = "tFileInputExcel_2";

						}

						globalMap.put("tFileInputExcel_2_NB_LINE",
								nb_line_tFileInputExcel_2);

					}

				} finally {

					if (!(source_tFileInputExcel_2 instanceof java.io.InputStream)) {
						workbook_tFileInputExcel_2.getPackage().revert();
					}

				}

				ok_Hash.put("tFileInputExcel_2", true);
				end_Hash.put("tFileInputExcel_2", System.currentTimeMillis());

				/**
				 * [tFileInputExcel_2 end ] stop
				 */

				/**
				 * [tConvertType_2 end ] start
				 */

				currentComponent = "tConvertType_2";

				globalMap.put("tConvertType_2_NB_LINE", nb_line_tConvertType_2);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row2" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tConvertType_2", true);
				end_Hash.put("tConvertType_2", System.currentTimeMillis());

				/**
				 * [tConvertType_2 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row5" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tDBOutput_9 end ] start
				 */

				currentComponent = "tDBOutput_9";

				try {
					int countSum_tDBOutput_9 = 0;
					if (pstmt_tDBOutput_9 != null
							&& batchSizeCounter_tDBOutput_9 > 0) {

						for (int countEach_tDBOutput_9 : pstmt_tDBOutput_9
								.executeBatch()) {
							if (countEach_tDBOutput_9 == -2
									|| countEach_tDBOutput_9 == -3) {
								break;
							}
							countSum_tDBOutput_9 += countEach_tDBOutput_9;
						}

					}

					insertedCount_tDBOutput_9 += countSum_tDBOutput_9;

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tDBOutput_9 = 0;
					for (int countEach_tDBOutput_9 : e.getUpdateCounts()) {
						countSum_tDBOutput_9 += (countEach_tDBOutput_9 < 0 ? 0
								: countEach_tDBOutput_9);
					}

					insertedCount_tDBOutput_9 += countSum_tDBOutput_9;

					System.err.println(e.getMessage());

				}
				if (pstmt_tDBOutput_9 != null) {

					pstmt_tDBOutput_9.close();

				}

				conn_tDBOutput_9.commit();

				conn_tDBOutput_9.close();
				resourceMap.put("finish_tDBOutput_9", true);

				nb_line_deleted_tDBOutput_9 = nb_line_deleted_tDBOutput_9
						+ deletedCount_tDBOutput_9;
				nb_line_update_tDBOutput_9 = nb_line_update_tDBOutput_9
						+ updatedCount_tDBOutput_9;
				nb_line_inserted_tDBOutput_9 = nb_line_inserted_tDBOutput_9
						+ insertedCount_tDBOutput_9;
				nb_line_rejected_tDBOutput_9 = nb_line_rejected_tDBOutput_9
						+ rejectedCount_tDBOutput_9;

				globalMap.put("tDBOutput_9_NB_LINE", nb_line_tDBOutput_9);
				globalMap.put("tDBOutput_9_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_9);
				globalMap.put("tDBOutput_9_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_9);
				globalMap.put("tDBOutput_9_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_9);
				globalMap.put("tDBOutput_9_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_9);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("convert2" + iterateId,
								2, 0);
					}
				}

				ok_Hash.put("tDBOutput_9", true);
				end_Hash.put("tDBOutput_9", System.currentTimeMillis());

				/**
				 * [tDBOutput_9 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputExcel_2 finally ] start
				 */

				currentComponent = "tFileInputExcel_2";

				/**
				 * [tFileInputExcel_2 finally ] stop
				 */

				/**
				 * [tConvertType_2 finally ] start
				 */

				currentComponent = "tConvertType_2";

				/**
				 * [tConvertType_2 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tDBOutput_9 finally ] start
				 */

				currentComponent = "tDBOutput_9";

				if (resourceMap.get("finish_tDBOutput_9") == null) {
					if (resourceMap.get("conn_tDBOutput_9") != null) {
						try {

							java.sql.Connection ctn_tDBOutput_9 = (java.sql.Connection) resourceMap
									.get("conn_tDBOutput_9");

							ctn_tDBOutput_9.close();

						} catch (java.sql.SQLException sqlEx_tDBOutput_9) {
							String errorMessage_tDBOutput_9 = "failed to close the connection in tDBOutput_9 :"
									+ sqlEx_tDBOutput_9.getMessage();

							System.err.println(errorMessage_tDBOutput_9);
						}
					}
				}

				/**
				 * [tDBOutput_9 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputExcel_2_SUBPROCESS_STATE", 1);
	}

	public static class convert3Struct implements
			routines.system.IPersistableRow<convert3Struct> {
		final static byte[] commonByteArrayLock_PROYECTO_BI_carga_excel = new byte[0];
		static byte[] commonByteArray_PROYECTO_BI_carga_excel = new byte[0];

		public Integer A;

		public Integer getA() {
			return this.A;
		}

		public String vendedor;

		public String getVendedor() {
			return this.vendedor;
		}

		public String nombreVendedor;

		public String getNombreVendedor() {
			return this.nombreVendedor;
		}

		public String documentoVendedor;

		public String getDocumentoVendedor() {
			return this.documentoVendedor;
		}

		public String fechaVencimiento;

		public String getFechaVencimiento() {
			return this.fechaVencimiento;
		}

		public String tipoVendedor;

		public String getTipoVendedor() {
			return this.tipoVendedor;
		}

		public String codVendedor;

		public String getCodVendedor() {
			return this.codVendedor;
		}

		public String licencia;

		public String getLicencia() {
			return this.licencia;
		}

		public String observacion;

		public String getObservacion() {
			return this.observacion;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROYECTO_BI_carga_excel.length) {
					if (length < 1024
							&& commonByteArray_PROYECTO_BI_carga_excel.length == 0) {
						commonByteArray_PROYECTO_BI_carga_excel = new byte[1024];
					} else {
						commonByteArray_PROYECTO_BI_carga_excel = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROYECTO_BI_carga_excel, 0,
						length);
				strReturn = new String(commonByteArray_PROYECTO_BI_carga_excel,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROYECTO_BI_carga_excel) {

				try {

					int length = 0;

					this.A = readInteger(dis);

					this.vendedor = readString(dis);

					this.nombreVendedor = readString(dis);

					this.documentoVendedor = readString(dis);

					this.fechaVencimiento = readString(dis);

					this.tipoVendedor = readString(dis);

					this.codVendedor = readString(dis);

					this.licencia = readString(dis);

					this.observacion = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.A, dos);

				// String

				writeString(this.vendedor, dos);

				// String

				writeString(this.nombreVendedor, dos);

				// String

				writeString(this.documentoVendedor, dos);

				// String

				writeString(this.fechaVencimiento, dos);

				// String

				writeString(this.tipoVendedor, dos);

				// String

				writeString(this.codVendedor, dos);

				// String

				writeString(this.licencia, dos);

				// String

				writeString(this.observacion, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("A=" + String.valueOf(A));
			sb.append(",vendedor=" + vendedor);
			sb.append(",nombreVendedor=" + nombreVendedor);
			sb.append(",documentoVendedor=" + documentoVendedor);
			sb.append(",fechaVencimiento=" + fechaVencimiento);
			sb.append(",tipoVendedor=" + tipoVendedor);
			sb.append(",codVendedor=" + codVendedor);
			sb.append(",licencia=" + licencia);
			sb.append(",observacion=" + observacion);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(convert3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_PROYECTO_BI_carga_excel = new byte[0];
		static byte[] commonByteArray_PROYECTO_BI_carga_excel = new byte[0];

		public Integer A;

		public Integer getA() {
			return this.A;
		}

		public String B;

		public String getB() {
			return this.B;
		}

		public String C;

		public String getC() {
			return this.C;
		}

		public String D;

		public String getD() {
			return this.D;
		}

		public String E;

		public String getE() {
			return this.E;
		}

		public Integer F;

		public Integer getF() {
			return this.F;
		}

		public String G;

		public String getG() {
			return this.G;
		}

		public String H;

		public String getH() {
			return this.H;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROYECTO_BI_carga_excel.length) {
					if (length < 1024
							&& commonByteArray_PROYECTO_BI_carga_excel.length == 0) {
						commonByteArray_PROYECTO_BI_carga_excel = new byte[1024];
					} else {
						commonByteArray_PROYECTO_BI_carga_excel = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROYECTO_BI_carga_excel, 0,
						length);
				strReturn = new String(commonByteArray_PROYECTO_BI_carga_excel,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROYECTO_BI_carga_excel) {

				try {

					int length = 0;

					this.A = readInteger(dis);

					this.B = readString(dis);

					this.C = readString(dis);

					this.D = readString(dis);

					this.E = readString(dis);

					this.F = readInteger(dis);

					this.G = readString(dis);

					this.H = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.A, dos);

				// String

				writeString(this.B, dos);

				// String

				writeString(this.C, dos);

				// String

				writeString(this.D, dos);

				// String

				writeString(this.E, dos);

				// Integer

				writeInteger(this.F, dos);

				// String

				writeString(this.G, dos);

				// String

				writeString(this.H, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("A=" + String.valueOf(A));
			sb.append(",B=" + B);
			sb.append(",C=" + C);
			sb.append(",D=" + D);
			sb.append(",E=" + E);
			sb.append(",F=" + String.valueOf(F));
			sb.append(",G=" + G);
			sb.append(",H=" + H);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_PROYECTO_BI_carga_excel = new byte[0];
		static byte[] commonByteArray_PROYECTO_BI_carga_excel = new byte[0];

		public Integer A;

		public Integer getA() {
			return this.A;
		}

		public String B;

		public String getB() {
			return this.B;
		}

		public String C;

		public String getC() {
			return this.C;
		}

		public String D;

		public String getD() {
			return this.D;
		}

		public String E;

		public String getE() {
			return this.E;
		}

		public Integer F;

		public Integer getF() {
			return this.F;
		}

		public String G;

		public String getG() {
			return this.G;
		}

		public String H;

		public String getH() {
			return this.H;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROYECTO_BI_carga_excel.length) {
					if (length < 1024
							&& commonByteArray_PROYECTO_BI_carga_excel.length == 0) {
						commonByteArray_PROYECTO_BI_carga_excel = new byte[1024];
					} else {
						commonByteArray_PROYECTO_BI_carga_excel = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROYECTO_BI_carga_excel, 0,
						length);
				strReturn = new String(commonByteArray_PROYECTO_BI_carga_excel,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROYECTO_BI_carga_excel) {

				try {

					int length = 0;

					this.A = readInteger(dis);

					this.B = readString(dis);

					this.C = readString(dis);

					this.D = readString(dis);

					this.E = readString(dis);

					this.F = readInteger(dis);

					this.G = readString(dis);

					this.H = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.A, dos);

				// String

				writeString(this.B, dos);

				// String

				writeString(this.C, dos);

				// String

				writeString(this.D, dos);

				// String

				writeString(this.E, dos);

				// Integer

				writeInteger(this.F, dos);

				// String

				writeString(this.G, dos);

				// String

				writeString(this.H, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("A=" + String.valueOf(A));
			sb.append(",B=" + B);
			sb.append(",C=" + C);
			sb.append(",D=" + D);
			sb.append(",E=" + E);
			sb.append(",F=" + String.valueOf(F));
			sb.append(",G=" + G);
			sb.append(",H=" + H);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputExcel_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputExcel_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();
				row6Struct row6 = new row6Struct();
				convert3Struct convert3 = new convert3Struct();

				/**
				 * [tDBOutput_11 begin ] start
				 */

				ok_Hash.put("tDBOutput_11", false);
				start_Hash.put("tDBOutput_11", System.currentTimeMillis());

				currentComponent = "tDBOutput_11";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("convert3" + iterateId,
								0, 0);

					}
				}

				int tos_count_tDBOutput_11 = 0;

				class BytesLimit65535_tDBOutput_11 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBOutput_11().limitLog4jByte();

				int nb_line_tDBOutput_11 = 0;
				int nb_line_update_tDBOutput_11 = 0;
				int nb_line_inserted_tDBOutput_11 = 0;
				int nb_line_deleted_tDBOutput_11 = 0;
				int nb_line_rejected_tDBOutput_11 = 0;

				int deletedCount_tDBOutput_11 = 0;
				int updatedCount_tDBOutput_11 = 0;
				int insertedCount_tDBOutput_11 = 0;
				int rejectedCount_tDBOutput_11 = 0;
				String dbschema_tDBOutput_11 = null;
				String tableName_tDBOutput_11 = null;
				boolean whetherReject_tDBOutput_11 = false;

				java.util.Calendar calendar_tDBOutput_11 = java.util.Calendar
						.getInstance();
				long year1_tDBOutput_11 = TalendDate.parseDate("yyyy-MM-dd",
						"0001-01-01").getTime();
				long year2_tDBOutput_11 = TalendDate.parseDate("yyyy-MM-dd",
						"1753-01-01").getTime();
				long year10000_tDBOutput_11 = TalendDate.parseDate(
						"yyyy-MM-dd HH:mm:ss", "9999-12-31 24:00:00").getTime();
				long date_tDBOutput_11;

				java.util.Calendar calendar_datetimeoffset_tDBOutput_11 = java.util.Calendar
						.getInstance(java.util.TimeZone.getTimeZone("UTC"));

				java.sql.Connection conn_tDBOutput_11 = null;
				String dbUser_tDBOutput_11 = null;
				dbschema_tDBOutput_11 = "";
				String driverClass_tDBOutput_11 = "net.sourceforge.jtds.jdbc.Driver";

				java.lang.Class.forName(driverClass_tDBOutput_11);
				String port_tDBOutput_11 = "1433";
				String dbname_tDBOutput_11 = "RETAIL";
				String url_tDBOutput_11 = "jdbc:jtds:sqlserver://"
						+ "ljc-sql-server.database.windows.net";
				if (!"".equals(port_tDBOutput_11)) {
					url_tDBOutput_11 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBOutput_11)) {
					url_tDBOutput_11 += "//" + "RETAIL";

				}
				url_tDBOutput_11 += ";appName=" + projectName + ";" + "";
				dbUser_tDBOutput_11 = "azure";

				final String decryptedPassword_tDBOutput_11 = routines.system.PasswordEncryptUtil
						.decryptPassword("4cdbb7d6ce1a91474d5f2279f21fdb4e");

				String dbPwd_tDBOutput_11 = decryptedPassword_tDBOutput_11;
				conn_tDBOutput_11 = java.sql.DriverManager.getConnection(
						url_tDBOutput_11, dbUser_tDBOutput_11,
						dbPwd_tDBOutput_11);

				resourceMap.put("conn_tDBOutput_11", conn_tDBOutput_11);

				conn_tDBOutput_11.setAutoCommit(false);
				int commitEvery_tDBOutput_11 = 10000;
				int commitCounter_tDBOutput_11 = 0;

				int batchSize_tDBOutput_11 = 10000;
				int batchSizeCounter_tDBOutput_11 = 0;

				if (dbschema_tDBOutput_11 == null
						|| dbschema_tDBOutput_11.trim().length() == 0) {
					tableName_tDBOutput_11 = "";
				} else {
					tableName_tDBOutput_11 = dbschema_tDBOutput_11 + "].[" + "";
				}
				int count_tDBOutput_11 = 0;

				String insert_tDBOutput_11 = "INSERT INTO ["
						+ tableName_tDBOutput_11
						+ "] ([A],[vendedor],[nombreVendedor],[documentoVendedor],[fechaVencimiento],[tipoVendedor],[codVendedor],[licencia],[observacion]) VALUES (?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tDBOutput_11 = conn_tDBOutput_11
						.prepareStatement(insert_tDBOutput_11);

				/**
				 * [tDBOutput_11 begin ] stop
				 */

				/**
				 * [tMap_3 begin ] start
				 */

				ok_Hash.put("tMap_3", false);
				start_Hash.put("tMap_3", System.currentTimeMillis());

				currentComponent = "tMap_3";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row6" + iterateId, 0, 0);

					}
				}

				int tos_count_tMap_3 = 0;

				class BytesLimit65535_tMap_3 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMap_3().limitLog4jByte();

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_3__Struct {
				}
				Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				convert3Struct convert3_tmp = new convert3Struct();
				// ###############################

				/**
				 * [tMap_3 begin ] stop
				 */

				/**
				 * [tConvertType_3 begin ] start
				 */

				ok_Hash.put("tConvertType_3", false);
				start_Hash.put("tConvertType_3", System.currentTimeMillis());

				currentComponent = "tConvertType_3";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);

					}
				}

				int tos_count_tConvertType_3 = 0;

				class BytesLimit65535_tConvertType_3 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tConvertType_3().limitLog4jByte();
				int nb_line_tConvertType_3 = 0;

				/**
				 * [tConvertType_3 begin ] stop
				 */

				/**
				 * [tFileInputExcel_3 begin ] start
				 */

				ok_Hash.put("tFileInputExcel_3", false);
				start_Hash.put("tFileInputExcel_3", System.currentTimeMillis());

				currentComponent = "tFileInputExcel_3";

				int tos_count_tFileInputExcel_3 = 0;

				class BytesLimit65535_tFileInputExcel_3 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileInputExcel_3().limitLog4jByte();

				class RegexUtil_tFileInputExcel_3 {

					public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
							org.apache.poi.xssf.usermodel.XSSFWorkbook workbook,
							String oneSheetName, boolean useRegex) {

						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

						if (useRegex) {// this part process the regex issue

							java.util.regex.Pattern pattern = java.util.regex.Pattern
									.compile(oneSheetName);
							for (org.apache.poi.ss.usermodel.Sheet sheet : workbook) {
								String sheetName = sheet.getSheetName();
								java.util.regex.Matcher matcher = pattern
										.matcher(sheetName);
								if (matcher.matches()) {
									if (sheet != null) {
										list.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet);
									}
								}
							}

						} else {
							org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook
									.getSheet(oneSheetName);
							if (sheet != null) {
								list.add(sheet);
							}

						}

						return list;
					}

					public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
							org.apache.poi.xssf.usermodel.XSSFWorkbook workbook,
							int index, boolean useRegex) {
						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
						org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook
								.getSheetAt(index);
						if (sheet != null) {
							list.add(sheet);
						}
						return list;
					}

				}
				RegexUtil_tFileInputExcel_3 regexUtil_tFileInputExcel_3 = new RegexUtil_tFileInputExcel_3();

				Object source_tFileInputExcel_3 = "D:/OpenStudio/TOS_DI-Win32-20180411_1414-V7.0.1/workspace/PROYECTO_BI/excel/vendedor.xlsx";
				org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_3 = null;

				if (source_tFileInputExcel_3 instanceof String) {
					workbook_tFileInputExcel_3 = new org.apache.poi.xssf.usermodel.XSSFWorkbook(
							(String) source_tFileInputExcel_3);
				} else if (source_tFileInputExcel_3 instanceof java.io.InputStream) {
					workbook_tFileInputExcel_3 = new org.apache.poi.xssf.usermodel.XSSFWorkbook(
							(java.io.InputStream) source_tFileInputExcel_3);
				} else {
					workbook_tFileInputExcel_3 = null;
					throw new java.lang.Exception(
							"The data source should be specified as Inputstream or File Path!");
				}
				try {

					java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_3 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
					for (org.apache.poi.ss.usermodel.Sheet sheet_tFileInputExcel_3 : workbook_tFileInputExcel_3) {
						sheetList_tFileInputExcel_3
								.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet_tFileInputExcel_3);
					}
					if (sheetList_tFileInputExcel_3.size() <= 0) {
						throw new RuntimeException("Special sheets not exist!");
					}

					java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_3 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
					for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_3 : sheetList_tFileInputExcel_3) {
						if (sheet_FilterNull_tFileInputExcel_3 != null
								&& sheetList_FilterNull_tFileInputExcel_3
										.iterator() != null
								&& sheet_FilterNull_tFileInputExcel_3
										.iterator().hasNext()) {
							sheetList_FilterNull_tFileInputExcel_3
									.add(sheet_FilterNull_tFileInputExcel_3);
						}
					}
					sheetList_tFileInputExcel_3 = sheetList_FilterNull_tFileInputExcel_3;
					if (sheetList_tFileInputExcel_3.size() > 0) {
						int nb_line_tFileInputExcel_3 = 0;

						int begin_line_tFileInputExcel_3 = 0;

						int footer_input_tFileInputExcel_3 = 0;

						int end_line_tFileInputExcel_3 = 0;
						for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_3 : sheetList_tFileInputExcel_3) {
							end_line_tFileInputExcel_3 += (sheet_tFileInputExcel_3
									.getLastRowNum() + 1);
						}
						end_line_tFileInputExcel_3 -= footer_input_tFileInputExcel_3;
						int limit_tFileInputExcel_3 = -1;
						int start_column_tFileInputExcel_3 = 1 - 1;
						int end_column_tFileInputExcel_3 = -1;

						org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_3 = null;
						org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_3 = sheetList_tFileInputExcel_3
								.get(0);
						int rowCount_tFileInputExcel_3 = 0;
						int sheetIndex_tFileInputExcel_3 = 0;
						int currentRows_tFileInputExcel_3 = (sheetList_tFileInputExcel_3
								.get(0).getLastRowNum() + 1);

						// for the number format
						java.text.DecimalFormat df_tFileInputExcel_3 = new java.text.DecimalFormat(
								"#.####################################");
						char decimalChar_tFileInputExcel_3 = df_tFileInputExcel_3
								.getDecimalFormatSymbols()
								.getDecimalSeparator();

						for (int i_tFileInputExcel_3 = begin_line_tFileInputExcel_3; i_tFileInputExcel_3 < end_line_tFileInputExcel_3; i_tFileInputExcel_3++) {

							int emptyColumnCount_tFileInputExcel_3 = 0;

							if (limit_tFileInputExcel_3 != -1
									&& nb_line_tFileInputExcel_3 >= limit_tFileInputExcel_3) {
								break;
							}

							while (i_tFileInputExcel_3 >= rowCount_tFileInputExcel_3
									+ currentRows_tFileInputExcel_3) {
								rowCount_tFileInputExcel_3 += currentRows_tFileInputExcel_3;
								sheet_tFileInputExcel_3 = sheetList_tFileInputExcel_3
										.get(++sheetIndex_tFileInputExcel_3);
								currentRows_tFileInputExcel_3 = (sheet_tFileInputExcel_3
										.getLastRowNum() + 1);
							}
							globalMap.put("tFileInputExcel_3_CURRENT_SHEET",
									sheet_tFileInputExcel_3.getSheetName());
							if (rowCount_tFileInputExcel_3 <= i_tFileInputExcel_3) {
								row_tFileInputExcel_3 = sheet_tFileInputExcel_3
										.getRow(i_tFileInputExcel_3
												- rowCount_tFileInputExcel_3);
							}
							row3 = null;
							int tempRowLength_tFileInputExcel_3 = 8;

							int columnIndex_tFileInputExcel_3 = 0;

							String[] temp_row_tFileInputExcel_3 = new String[tempRowLength_tFileInputExcel_3];
							int excel_end_column_tFileInputExcel_3;
							if (row_tFileInputExcel_3 == null) {
								excel_end_column_tFileInputExcel_3 = 0;
							} else {
								excel_end_column_tFileInputExcel_3 = row_tFileInputExcel_3
										.getLastCellNum();
							}
							int actual_end_column_tFileInputExcel_3;
							if (end_column_tFileInputExcel_3 == -1) {
								actual_end_column_tFileInputExcel_3 = excel_end_column_tFileInputExcel_3;
							} else {
								actual_end_column_tFileInputExcel_3 = end_column_tFileInputExcel_3 > excel_end_column_tFileInputExcel_3 ? excel_end_column_tFileInputExcel_3
										: end_column_tFileInputExcel_3;
							}
							org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_3 = null;
							for (int i = 0; i < tempRowLength_tFileInputExcel_3; i++) {
								if (i + start_column_tFileInputExcel_3 < actual_end_column_tFileInputExcel_3) {
									org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_3 = row_tFileInputExcel_3
											.getCell(i
													+ start_column_tFileInputExcel_3);
									if (cell_tFileInputExcel_3 != null) {
										switch (cell_tFileInputExcel_3
												.getCellType()) {
										case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_STRING:
											temp_row_tFileInputExcel_3[i] = cell_tFileInputExcel_3
													.getRichStringCellValue()
													.getString();
											break;
										case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC:
											if (org.apache.poi.ss.usermodel.DateUtil
													.isCellDateFormatted(cell_tFileInputExcel_3)) {
												temp_row_tFileInputExcel_3[i] = cell_tFileInputExcel_3
														.getDateCellValue()
														.toString();
											} else {
												temp_row_tFileInputExcel_3[i] = df_tFileInputExcel_3
														.format(cell_tFileInputExcel_3
																.getNumericCellValue());
											}
											break;
										case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BOOLEAN:
											temp_row_tFileInputExcel_3[i] = String
													.valueOf(cell_tFileInputExcel_3
															.getBooleanCellValue());
											break;
										case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_FORMULA:
											switch (cell_tFileInputExcel_3
													.getCachedFormulaResultType()) {
											case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_STRING:
												temp_row_tFileInputExcel_3[i] = cell_tFileInputExcel_3
														.getRichStringCellValue()
														.getString();
												break;
											case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC:
												if (org.apache.poi.ss.usermodel.DateUtil
														.isCellDateFormatted(cell_tFileInputExcel_3)) {
													temp_row_tFileInputExcel_3[i] = cell_tFileInputExcel_3
															.getDateCellValue()
															.toString();
												} else {
													ne_tFileInputExcel_3 = new org.apache.poi.ss.formula.eval.NumberEval(
															cell_tFileInputExcel_3
																	.getNumericCellValue());
													temp_row_tFileInputExcel_3[i] = ne_tFileInputExcel_3
															.getStringValue();
												}
												break;
											case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BOOLEAN:
												temp_row_tFileInputExcel_3[i] = String
														.valueOf(cell_tFileInputExcel_3
																.getBooleanCellValue());
												break;
											default:
												temp_row_tFileInputExcel_3[i] = "";
											}
											break;
										default:
											temp_row_tFileInputExcel_3[i] = "";
										}
									} else {
										temp_row_tFileInputExcel_3[i] = "";
									}

								} else {
									temp_row_tFileInputExcel_3[i] = "";
								}
							}
							boolean whetherReject_tFileInputExcel_3 = false;
							row3 = new row3Struct();
							int curColNum_tFileInputExcel_3 = -1;
							String curColName_tFileInputExcel_3 = "";
							try {
								columnIndex_tFileInputExcel_3 = 0;

								if (temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3]
										.length() > 0) {
									curColNum_tFileInputExcel_3 = columnIndex_tFileInputExcel_3
											+ start_column_tFileInputExcel_3
											+ 1;
									curColName_tFileInputExcel_3 = "A";

									row3.A = ParserUtils
											.parseTo_Integer(ParserUtils
													.parseTo_Number(
															temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3],
															null,
															'.' == decimalChar_tFileInputExcel_3 ? null
																	: decimalChar_tFileInputExcel_3));
								} else {
									row3.A = null;
									emptyColumnCount_tFileInputExcel_3++;
								}
								columnIndex_tFileInputExcel_3 = 1;

								if (temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3]
										.length() > 0) {
									curColNum_tFileInputExcel_3 = columnIndex_tFileInputExcel_3
											+ start_column_tFileInputExcel_3
											+ 1;
									curColName_tFileInputExcel_3 = "B";

									row3.B = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3];
								} else {
									row3.B = null;
									emptyColumnCount_tFileInputExcel_3++;
								}
								columnIndex_tFileInputExcel_3 = 2;

								if (temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3]
										.length() > 0) {
									curColNum_tFileInputExcel_3 = columnIndex_tFileInputExcel_3
											+ start_column_tFileInputExcel_3
											+ 1;
									curColName_tFileInputExcel_3 = "C";

									row3.C = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3];
								} else {
									row3.C = null;
									emptyColumnCount_tFileInputExcel_3++;
								}
								columnIndex_tFileInputExcel_3 = 3;

								if (temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3]
										.length() > 0) {
									curColNum_tFileInputExcel_3 = columnIndex_tFileInputExcel_3
											+ start_column_tFileInputExcel_3
											+ 1;
									curColName_tFileInputExcel_3 = "D";

									row3.D = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3];
								} else {
									row3.D = null;
									emptyColumnCount_tFileInputExcel_3++;
								}
								columnIndex_tFileInputExcel_3 = 4;

								if (temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3]
										.length() > 0) {
									curColNum_tFileInputExcel_3 = columnIndex_tFileInputExcel_3
											+ start_column_tFileInputExcel_3
											+ 1;
									curColName_tFileInputExcel_3 = "E";

									row3.E = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3];
								} else {
									row3.E = null;
									emptyColumnCount_tFileInputExcel_3++;
								}
								columnIndex_tFileInputExcel_3 = 5;

								if (temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3]
										.length() > 0) {
									curColNum_tFileInputExcel_3 = columnIndex_tFileInputExcel_3
											+ start_column_tFileInputExcel_3
											+ 1;
									curColName_tFileInputExcel_3 = "F";

									row3.F = ParserUtils
											.parseTo_Integer(ParserUtils
													.parseTo_Number(
															temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3],
															null,
															'.' == decimalChar_tFileInputExcel_3 ? null
																	: decimalChar_tFileInputExcel_3));
								} else {
									row3.F = null;
									emptyColumnCount_tFileInputExcel_3++;
								}
								columnIndex_tFileInputExcel_3 = 6;

								if (temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3]
										.length() > 0) {
									curColNum_tFileInputExcel_3 = columnIndex_tFileInputExcel_3
											+ start_column_tFileInputExcel_3
											+ 1;
									curColName_tFileInputExcel_3 = "G";

									row3.G = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3];
								} else {
									row3.G = null;
									emptyColumnCount_tFileInputExcel_3++;
								}
								columnIndex_tFileInputExcel_3 = 7;

								if (temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3]
										.length() > 0) {
									curColNum_tFileInputExcel_3 = columnIndex_tFileInputExcel_3
											+ start_column_tFileInputExcel_3
											+ 1;
									curColName_tFileInputExcel_3 = "H";

									row3.H = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3];
								} else {
									row3.H = null;
									emptyColumnCount_tFileInputExcel_3++;
								}

								nb_line_tFileInputExcel_3++;

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputExcel_3 = true;
								System.err.println(e.getMessage());
								row3 = null;
							}

							/**
							 * [tFileInputExcel_3 begin ] stop
							 */

							/**
							 * [tFileInputExcel_3 main ] start
							 */

							currentComponent = "tFileInputExcel_3";

							tos_count_tFileInputExcel_3++;

							/**
							 * [tFileInputExcel_3 main ] stop
							 */

							/**
							 * [tFileInputExcel_3 process_data_begin ] start
							 */

							currentComponent = "tFileInputExcel_3";

							/**
							 * [tFileInputExcel_3 process_data_begin ] stop
							 */
							// Start of branch "row3"
							if (row3 != null) {

								/**
								 * [tConvertType_3 main ] start
								 */

								currentComponent = "tConvertType_3";

								// row3
								// row3

								if (execStat) {
									runStat.updateStatOnConnection("row3"
											+ iterateId, 1, 1);
								}

								row6 = new row6Struct();
								boolean bHasError_tConvertType_3 = false;
								if (bHasError_tConvertType_3) {
									row6 = null;
								}

								nb_line_tConvertType_3++;

								tos_count_tConvertType_3++;

								/**
								 * [tConvertType_3 main ] stop
								 */

								/**
								 * [tConvertType_3 process_data_begin ] start
								 */

								currentComponent = "tConvertType_3";

								/**
								 * [tConvertType_3 process_data_begin ] stop
								 */
								// Start of branch "row6"
								if (row6 != null) {

									/**
									 * [tMap_3 main ] start
									 */

									currentComponent = "tMap_3";

									// row6
									// row6

									if (execStat) {
										runStat.updateStatOnConnection("row6"
												+ iterateId, 1, 1);
									}

									boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

									// ###############################
									// # Input tables (lookups)
									boolean rejectedInnerJoin_tMap_3 = false;
									boolean mainRowRejected_tMap_3 = false;

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
										// ###############################
										// # Output tables

										convert3 = null;

										// # Output table : 'convert3'
										convert3_tmp.A = row6.A;
										convert3_tmp.vendedor = row6.B;
										convert3_tmp.nombreVendedor = row6.C;
										convert3_tmp.documentoVendedor = row6.D;
										convert3_tmp.fechaVencimiento = row6.E;
										convert3_tmp.tipoVendedor = row6.F;
										convert3_tmp.codVendedor = row6.G;
										convert3_tmp.licencia = row6.H;
										convert3_tmp.observacion = null;
										convert3 = convert3_tmp;
										// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_3 = false;

									tos_count_tMap_3++;

									/**
									 * [tMap_3 main ] stop
									 */

									/**
									 * [tMap_3 process_data_begin ] start
									 */

									currentComponent = "tMap_3";

									/**
									 * [tMap_3 process_data_begin ] stop
									 */
									// Start of branch "convert3"
									if (convert3 != null) {

										/**
										 * [tDBOutput_11 main ] start
										 */

										currentComponent = "tDBOutput_11";

										// convert3
										// convert3

										if (execStat) {
											runStat.updateStatOnConnection(
													"convert3" + iterateId, 1,
													1);
										}

										whetherReject_tDBOutput_11 = false;
										if (convert3.A == null) {
											pstmt_tDBOutput_11.setNull(1,
													java.sql.Types.INTEGER);
										} else {
											pstmt_tDBOutput_11.setInt(1,
													convert3.A);
										}

										if (convert3.vendedor == null) {
											pstmt_tDBOutput_11.setNull(2,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_11.setString(2,
													convert3.vendedor);
										}

										if (convert3.nombreVendedor == null) {
											pstmt_tDBOutput_11.setNull(3,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_11.setString(3,
													convert3.nombreVendedor);
										}

										if (convert3.documentoVendedor == null) {
											pstmt_tDBOutput_11.setNull(4,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_11.setString(4,
													convert3.documentoVendedor);
										}

										if (convert3.fechaVencimiento == null) {
											pstmt_tDBOutput_11.setNull(5,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_11.setString(5,
													convert3.fechaVencimiento);
										}

										if (convert3.tipoVendedor == null) {
											pstmt_tDBOutput_11.setNull(6,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_11.setString(6,
													convert3.tipoVendedor);
										}

										if (convert3.codVendedor == null) {
											pstmt_tDBOutput_11.setNull(7,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_11.setString(7,
													convert3.codVendedor);
										}

										if (convert3.licencia == null) {
											pstmt_tDBOutput_11.setNull(8,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_11.setString(8,
													convert3.licencia);
										}

										if (convert3.observacion == null) {
											pstmt_tDBOutput_11.setNull(9,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_11.setString(9,
													convert3.observacion);
										}

										pstmt_tDBOutput_11.addBatch();
										nb_line_tDBOutput_11++;

										batchSizeCounter_tDBOutput_11++;

										// ////////batch execute by batch
										// size///////
										class LimitBytesHelper_tDBOutput_11 {
											public int limitBytePart1(
													int counter,
													java.sql.PreparedStatement pstmt_tDBOutput_11)
													throws Exception {
												try {

													for (int countEach_tDBOutput_11 : pstmt_tDBOutput_11
															.executeBatch()) {
														if (countEach_tDBOutput_11 == -2
																|| countEach_tDBOutput_11 == -3) {
															break;
														}
														counter += countEach_tDBOutput_11;
													}

												} catch (java.sql.BatchUpdateException e) {

													int countSum_tDBOutput_11 = 0;
													for (int countEach_tDBOutput_11 : e
															.getUpdateCounts()) {
														counter += (countEach_tDBOutput_11 < 0 ? 0
																: countEach_tDBOutput_11);
													}

													System.err.println(e
															.getMessage());

												}
												return counter;
											}

											public int limitBytePart2(
													int counter,
													java.sql.PreparedStatement pstmt_tDBOutput_11)
													throws Exception {
												try {

													for (int countEach_tDBOutput_11 : pstmt_tDBOutput_11
															.executeBatch()) {
														if (countEach_tDBOutput_11 == -2
																|| countEach_tDBOutput_11 == -3) {
															break;
														}
														counter += countEach_tDBOutput_11;
													}

												} catch (java.sql.BatchUpdateException e) {

													for (int countEach_tDBOutput_11 : e
															.getUpdateCounts()) {
														counter += (countEach_tDBOutput_11 < 0 ? 0
																: countEach_tDBOutput_11);
													}

													System.err.println(e
															.getMessage());

												}
												return counter;
											}
										}
										if ((batchSize_tDBOutput_11 > 0)
												&& (batchSize_tDBOutput_11 <= batchSizeCounter_tDBOutput_11)) {

											insertedCount_tDBOutput_11 = new LimitBytesHelper_tDBOutput_11()
													.limitBytePart1(
															insertedCount_tDBOutput_11,
															pstmt_tDBOutput_11);

											batchSizeCounter_tDBOutput_11 = 0;
										}

										// //////////commit every////////////

										commitCounter_tDBOutput_11++;
										if (commitEvery_tDBOutput_11 <= commitCounter_tDBOutput_11) {
											if ((batchSize_tDBOutput_11 > 0)
													&& (batchSizeCounter_tDBOutput_11 > 0)) {

												insertedCount_tDBOutput_11 = new LimitBytesHelper_tDBOutput_11()
														.limitBytePart1(
																insertedCount_tDBOutput_11,
																pstmt_tDBOutput_11);

												batchSizeCounter_tDBOutput_11 = 0;
											}

											conn_tDBOutput_11.commit();

											commitCounter_tDBOutput_11 = 0;
										}

										tos_count_tDBOutput_11++;

										/**
										 * [tDBOutput_11 main ] stop
										 */

										/**
										 * [tDBOutput_11 process_data_begin ]
										 * start
										 */

										currentComponent = "tDBOutput_11";

										/**
										 * [tDBOutput_11 process_data_begin ]
										 * stop
										 */

										/**
										 * [tDBOutput_11 process_data_end ]
										 * start
										 */

										currentComponent = "tDBOutput_11";

										/**
										 * [tDBOutput_11 process_data_end ] stop
										 */

									} // End of branch "convert3"

									/**
									 * [tMap_3 process_data_end ] start
									 */

									currentComponent = "tMap_3";

									/**
									 * [tMap_3 process_data_end ] stop
									 */

								} // End of branch "row6"

								/**
								 * [tConvertType_3 process_data_end ] start
								 */

								currentComponent = "tConvertType_3";

								/**
								 * [tConvertType_3 process_data_end ] stop
								 */

							} // End of branch "row3"

							/**
							 * [tFileInputExcel_3 process_data_end ] start
							 */

							currentComponent = "tFileInputExcel_3";

							/**
							 * [tFileInputExcel_3 process_data_end ] stop
							 */

							/**
							 * [tFileInputExcel_3 end ] start
							 */

							currentComponent = "tFileInputExcel_3";

						}

						globalMap.put("tFileInputExcel_3_NB_LINE",
								nb_line_tFileInputExcel_3);

					}

				} finally {

					if (!(source_tFileInputExcel_3 instanceof java.io.InputStream)) {
						workbook_tFileInputExcel_3.getPackage().revert();
					}

				}

				ok_Hash.put("tFileInputExcel_3", true);
				end_Hash.put("tFileInputExcel_3", System.currentTimeMillis());

				/**
				 * [tFileInputExcel_3 end ] stop
				 */

				/**
				 * [tConvertType_3 end ] start
				 */

				currentComponent = "tConvertType_3";

				globalMap.put("tConvertType_3_NB_LINE", nb_line_tConvertType_3);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row3" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tConvertType_3", true);
				end_Hash.put("tConvertType_3", System.currentTimeMillis());

				/**
				 * [tConvertType_3 end ] stop
				 */

				/**
				 * [tMap_3 end ] start
				 */

				currentComponent = "tMap_3";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row6" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMap_3", true);
				end_Hash.put("tMap_3", System.currentTimeMillis());

				/**
				 * [tMap_3 end ] stop
				 */

				/**
				 * [tDBOutput_11 end ] start
				 */

				currentComponent = "tDBOutput_11";

				try {
					int countSum_tDBOutput_11 = 0;
					if (pstmt_tDBOutput_11 != null
							&& batchSizeCounter_tDBOutput_11 > 0) {

						for (int countEach_tDBOutput_11 : pstmt_tDBOutput_11
								.executeBatch()) {
							if (countEach_tDBOutput_11 == -2
									|| countEach_tDBOutput_11 == -3) {
								break;
							}
							countSum_tDBOutput_11 += countEach_tDBOutput_11;
						}

					}

					insertedCount_tDBOutput_11 += countSum_tDBOutput_11;

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tDBOutput_11 = 0;
					for (int countEach_tDBOutput_11 : e.getUpdateCounts()) {
						countSum_tDBOutput_11 += (countEach_tDBOutput_11 < 0 ? 0
								: countEach_tDBOutput_11);
					}

					insertedCount_tDBOutput_11 += countSum_tDBOutput_11;

					System.err.println(e.getMessage());

				}
				if (pstmt_tDBOutput_11 != null) {

					pstmt_tDBOutput_11.close();

				}

				conn_tDBOutput_11.commit();

				conn_tDBOutput_11.close();
				resourceMap.put("finish_tDBOutput_11", true);

				nb_line_deleted_tDBOutput_11 = nb_line_deleted_tDBOutput_11
						+ deletedCount_tDBOutput_11;
				nb_line_update_tDBOutput_11 = nb_line_update_tDBOutput_11
						+ updatedCount_tDBOutput_11;
				nb_line_inserted_tDBOutput_11 = nb_line_inserted_tDBOutput_11
						+ insertedCount_tDBOutput_11;
				nb_line_rejected_tDBOutput_11 = nb_line_rejected_tDBOutput_11
						+ rejectedCount_tDBOutput_11;

				globalMap.put("tDBOutput_11_NB_LINE", nb_line_tDBOutput_11);
				globalMap.put("tDBOutput_11_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_11);
				globalMap.put("tDBOutput_11_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_11);
				globalMap.put("tDBOutput_11_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_11);
				globalMap.put("tDBOutput_11_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_11);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("convert3" + iterateId,
								2, 0);
					}
				}

				ok_Hash.put("tDBOutput_11", true);
				end_Hash.put("tDBOutput_11", System.currentTimeMillis());

				/**
				 * [tDBOutput_11 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputExcel_3 finally ] start
				 */

				currentComponent = "tFileInputExcel_3";

				/**
				 * [tFileInputExcel_3 finally ] stop
				 */

				/**
				 * [tConvertType_3 finally ] start
				 */

				currentComponent = "tConvertType_3";

				/**
				 * [tConvertType_3 finally ] stop
				 */

				/**
				 * [tMap_3 finally ] start
				 */

				currentComponent = "tMap_3";

				/**
				 * [tMap_3 finally ] stop
				 */

				/**
				 * [tDBOutput_11 finally ] start
				 */

				currentComponent = "tDBOutput_11";

				if (resourceMap.get("finish_tDBOutput_11") == null) {
					if (resourceMap.get("conn_tDBOutput_11") != null) {
						try {

							java.sql.Connection ctn_tDBOutput_11 = (java.sql.Connection) resourceMap
									.get("conn_tDBOutput_11");

							ctn_tDBOutput_11.close();

						} catch (java.sql.SQLException sqlEx_tDBOutput_11) {
							String errorMessage_tDBOutput_11 = "failed to close the connection in tDBOutput_11 :"
									+ sqlEx_tDBOutput_11.getMessage();

							System.err.println(errorMessage_tDBOutput_11);
						}
					}
				}

				/**
				 * [tDBOutput_11 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputExcel_3_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final carga_excel carga_excelClass = new carga_excel();

		int exitCode = carga_excelClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = carga_excel.class.getClassLoader()
					.getResourceAsStream(
							"proyecto_bi/carga_excel_0_1/contexts/"
									+ contextStr + ".properties");
			if (inContext == null) {
				inContext = carga_excel.class
						.getClassLoader()
						.getResourceAsStream(
								"config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				defaultProps.load(inContext);
				inContext.close();
				context = new ContextProperties(defaultProps);
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param
				// is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param
							.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputExcel_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputExcel_1) {
			globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", -1);

			e_tFileInputExcel_1.printStackTrace();

		}
		try {
			errorCode = null;
			tFileInputExcel_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputExcel_2) {
			globalMap.put("tFileInputExcel_2_SUBPROCESS_STATE", -1);

			e_tFileInputExcel_2.printStackTrace();

		}
		try {
			errorCode = null;
			tFileInputExcel_3Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputExcel_3) {
			globalMap.put("tFileInputExcel_3_SUBPROCESS_STATE", -1);

			e_tFileInputExcel_3.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : carga_excel");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 196239 characters generated by Talend Open Studio for Data Integration on the
 * 20 de noviembre de 2018 07:02:16 PM COT
 ************************************************************************************************/
